.TH "Chaser" 3 "Wed Apr 17 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Chaser \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Chaser\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBChaser\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "bool \fBchase_update\fP (\fBGridField\fP *global_edf, vector< Point > target_pnts, Point chaser_x0, Twist chaser_v0, Twist chaser_a0, TimeSeries knots)"
.br
.ti -1c
.RI "void \fBsession\fP (double t)"
.br
.ti -1c
.RI "Point \fBeval_point\fP (double t_eval)"
.br
.ti -1c
.RI "Twist \fBeval_velocity\fP (double t_eval)"
.br
.ti -1c
.RI "Twist \fBeval_acceleration\fP (double t_eval)"
.br
.ti -1c
.RI "Point \fBget_control_point\fP (double t_eval)"
.br
.RI "\fIobtains the latest control point\&. yaw will be selected from wrapper with information of target \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBis_complete_chasing_path\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBpreplan\fP ()"
.br
.ti -1c
.RI "void \fBpath_complete\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBPreplanner\fP \fBpreplanner\fP"
.br
.ti -1c
.RI "\fBSmoothPlanner\fP \fBsmooth_planner\fP"
.br
.ti -1c
.RI "double \fBspawn_x\fP"
.br
.ti -1c
.RI "double \fBspawn_y\fP"
.br
.ti -1c
.RI "double \fBhovering_z\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Chaser::Chaser ()"

.PP
.nf
3 :is_complete_chasing_path(false){}
.fi
.SH "Member Function Documentation"
.PP 
.SS "bool Chaser::chase_update (\fBGridField\fP * global_edf, vector< Point > target_pnts, Point chaser_x0, Twist chaser_v0, Twist chaser_a0, TimeSeries knots)"

.PP
.nf
16                                                                                                                                              {
17     
18     bool result = false;
19     
20     // phase 1 pre planning 
21     preplanner\&.preplan(global_edf_ptr,target_pnts,chaser_x0);
22     ROS_INFO("[Chaser] preplanning completed\&.");
23 
24     nav_msgs::Path waypoints = preplanner\&.get_preplanned_waypoints();
25 
26     if(waypoints\&.poses\&.size()){
27         // phase 2 smooth planning     
28         smooth_planner\&.traj_gen(knots,waypoints,chaser_v0,chaser_a0);
29         if (smooth_planner\&.planner\&.is_spline_valid())
30             {ROS_INFO("[Chaser] smooth path completed\&."); is_complete_chasing_path = true; return true;}
31         else 
32             ROS_WARN("[Chaser] smooth path incompleted\&.");
33     }else
34         ROS_WARN("[Chaser] preplanning failed");
35 
36     return false;
37 }
.fi
.SS "Twist Chaser::eval_acceleration (double t_eval)"

.PP
.nf
54                                             {
55     return smooth_planner\&.planner\&.accel_eval_spline(t_eval);        
56 }
.fi
.SS "Point Chaser::eval_point (double t_eval)"

.PP
.nf
45                                      {    
46     return smooth_planner\&.planner\&.point_eval_spline(t_eval);        
47 }
.fi
.SS "Twist Chaser::eval_velocity (double t_eval)"

.PP
.nf
50                                         {
51     return smooth_planner\&.planner\&.vel_eval_spline(t_eval);        
52 }
.fi
.SS "Point Chaser::get_control_point (double t_eval)"

.PP
obtains the latest control point\&. yaw will be selected from wrapper with information of target 
.PP
\fBParameters:\fP
.RS 4
\fIt_eval\fP evaluation time 
.RE
.PP
\fBReturns:\fP
.RS 4
Point the control point 
.RE
.PP

.PP
.nf
65                                             {    
66     if (this->is_complete_chasing_path)
67         return smooth_planner\&.planner\&.point_eval_spline(t_eval); 
68     else{// hovering command at the spawning position with desired height      
69             Point hovering_point;
70             hovering_point\&.x = spawn_x;
71             hovering_point\&.y = spawn_y;
72             hovering_point\&.z = hovering_z;        
73         return hovering_point;
74     }
75 }
.fi
.SS "void Chaser::init (ros::NodeHandle nh)"

.PP
.nf
5                                  {
6 
7     preplanner\&.init(nh);
8     smooth_planner\&.init(nh);
9 
10     // retreieve initial hovering command 
11     nh\&.param("chaser_init_x",spawn_x,0\&.0);
12     nh\&.param("chaser_init_y",spawn_y,0\&.0);
13     nh\&.param("chaser_init_z",hovering_z,1\&.0);
14 }
.fi
.SS "void Chaser::path_complete ()\fC [private]\fP"

.SS "void Chaser::preplan ()\fC [private]\fP"

.SS "void Chaser::session (double t)"

.PP
.nf
39                             {
40     preplanner\&.publish(); // markers     
41     smooth_planner\&.publish();  // markers 
42 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "double Chaser::hovering_z\fC [private]\fP"

.SS "bool Chaser::is_complete_chasing_path"

.SS "\fBPreplanner\fP Chaser::preplanner\fC [private]\fP"

.SS "\fBSmoothPlanner\fP Chaser::smooth_planner\fC [private]\fP"

.SS "double Chaser::spawn_x\fC [private]\fP"

.SS "double Chaser::spawn_y\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
