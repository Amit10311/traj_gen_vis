.TH "TargetManager" 3 "Wed Apr 17 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TargetManager \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <TargetManager\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBTargetManager\fP ()"
.br
.ti -1c
.RI "void \fBbroadcast_target_tf\fP (double time)"
.br
.ti -1c
.RI "void \fBinit\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "void \fBsession\fP (double t_eval)"
.br
.ti -1c
.RI "void \fBqueue_file_load\fP (vector< geometry_msgs::PoseStamped > &wpnt_replace)"
.br
.ti -1c
.RI "void \fBpop_waypoint\fP ()"
.br
.ti -1c
.RI "void \fBclear_waypoint\fP ()"
.br
.ti -1c
.RI "bool \fBglobal_path_generate\fP (double tf)"
.br
.ti -1c
.RI "void \fBcallback_waypoint\fP (const geometry_msgs::PoseStampedConstPtr &waypoint)"
.br
.ti -1c
.RI "void \fBqueue_file_load\fP (int, vector< geometry_msgs::PoseStamped > &)"
.br
.ti -1c
.RI "nav_msgs::Path \fBget_global_waypoints\fP ()"
.br
.ti -1c
.RI "vector< Point > \fBeval_time_seq\fP (VectorXd ts)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "vector< geometry_msgs::PoseStamped > \fBqueue\fP"
.br
.ti -1c
.RI "bool \fBis_insert_permit\fP = false"
.br
.ti -1c
.RI "bool \fBis_path\fP = false"
.br
.ti -1c
.RI "double \fBcur_spline_eval_time\fP = 0"
.br
.ti -1c
.RI "double \fBprevious_elapsed\fP =0"
.br
.ti -1c
.RI "double \fBbutton_elapsed\fP =0"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "PathPlanner \fBplanner\fP"
.br
.ti -1c
.RI "string \fBtarget_frame_id\fP"
.br
.ti -1c
.RI "string \fBworld_frame_id\fP"
.br
.ti -1c
.RI "int \fBmode\fP"
.br
.ti -1c
.RI "double \fBmin_z\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_marker_waypoints\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_path\fP"
.br
.ti -1c
.RI "ros::Subscriber \fBsub_waypoints\fP"
.br
.ti -1c
.RI "tf::TransformBroadcaster * \fBbr_ptr\fP"
.br
.ti -1c
.RI "visualization_msgs::MarkerArray \fBwpnt_markerArray\fP"
.br
.ti -1c
.RI "nav_msgs::Path \fBglobal_path\fP"
.br
.ti -1c
.RI "nav_msgs::Path \fBwaypoints_seq\fP"
.br
.ti -1c
.RI "TrajGenOpts \fBtraj_option\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "TargetManager::TargetManager ()"

.PP
.nf
3 {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "void TargetManager::broadcast_target_tf (double time)"

.PP
.nf
107                                                     {    
108 
109     tf::TransformBroadcaster br; 
110 
111     Point eval_point = planner\&.point_eval_spline(t_eval);
112     // Twist eval_vel = planner\&.vel_eval_spline(t_eval);
113 
114     tf::Transform transform;
115     // float target_yaw = atan2(eval_vel\&.linear\&.y,eval_vel\&.linear\&.x);
116     tf::Quaternion q;
117     q\&.setRPY(0, 0, 0);
118 
119     transform\&.setOrigin(tf::Vector3(eval_point\&.x,eval_point\&.y,eval_point\&.z));
120     transform\&.setRotation(q);
121     br_ptr->sendTransform(tf::StampedTransform(transform,ros::Time::now(),world_frame_id,target_frame_id));
122 }
.fi
.SS "void TargetManager::callback_waypoint (const geometry_msgs::PoseStampedConstPtr & waypoint)"

.PP
.nf
26                                                                                   {
27     if (is_insert_permit){
28         ROS_INFO("point received");
29         queue\&.push_back(*pose);
30         visualization_msgs::Marker marker;
31         
32         marker\&.action = 0;
33         marker\&.header\&.frame_id = world_frame_id;
34         marker\&.type = visualization_msgs::Marker::CUBE;
35         marker\&.pose = pose->pose;
36         float scale = 0\&.1;
37         marker\&.scale\&.x = scale;
38         marker\&.scale\&.y = scale;
39         marker\&.scale\&.z = scale;
40         marker\&.color\&.r = 1;
41         marker\&.color\&.a = 1;
42         marker\&.id = queue\&.size();
43         wpnt_markerArray\&.markers\&.push_back(marker);
44         
45         // lets print in board  
46         string line = "[Target manager] recieved point: " 
47                         + to_string(pose->pose\&.position\&.x) + " , "
48                         + to_string(pose->pose\&.position\&.y);
49         
50         ROS_INFO(line\&.c_str());        
51     }else{
52          
53  
54         ROS_WARN("[Target manager] insertion not allowed");
55         // std::cout<<"insertion not allowed"<<std::endl;
56     }
57 }
.fi
.SS "void TargetManager::clear_waypoint ()"

.PP
.nf
95                                   {
96     queue\&.clear();
97     wpnt_markerArray\&.markers\&.clear();
98     ROS_INFO("[Target manager] queue cleared ");    
99 }
.fi
.SS "vector< Point > TargetManager::eval_time_seq (VectorXd ts)"

.PP
.nf
164                                                      {
165     vector<Point> point_seq;
166     
167     for (int i = 0; i<ts\&.size();i++){
168         point_seq\&.push_back(planner\&.point_eval_spline(ts(i)));
169     }
170 
171     return point_seq;
172 }
.fi
.SS "nav_msgs::Path TargetManager::get_global_waypoints ()"

.PP
.nf
156                                                 {
157     // let's process the heights of target 
158     for(auto it = waypoints_seq\&.poses\&.begin(); it<waypoints_seq\&.poses\&.end(); it++)
159         it->pose\&.position\&.z = min_z + 0\&.001;
160         
161     return waypoints_seq;
162 }
.fi
.SS "bool TargetManager::global_path_generate (double tf)"

.PP
.nf
60                                                  {
61 
62     nav_msgs::Path waypoints;
63 
64     waypoints\&.poses = queue;
65     TimeSeries knots(queue\&.size());
66     if( queue\&.empty())
67         { ROS_INFO("[Target manager] target waypoints empty");   
68 return false; }
69     // waypoints update 
70     waypoints_seq = waypoints;
71     knots\&.setLinSpaced(queue\&.size(),0,tf);
72     planner\&.path_gen(knots,waypoints,geometry_msgs::Twist(),geometry_msgs::Twist(),traj_option); 
73     if(planner\&.is_spline_valid()){
74         is_path = true;
75         global_path = planner\&.get_path();
76         global_path\&.header\&.frame_id  = world_frame_id;
77         ROS_INFO("[Target manager] global path obtained\&.");    
78         return true;
79     }
80     else{
81         ROS_INFO("[Target manager] path generatoin failed\&.");   
82         return false; 
83     }
84 }
.fi
.SS "void TargetManager::init (ros::NodeHandle nh)"

.PP
.nf
5                                         {
6 
7     // paramter parsing for option 
8     nh\&.param<string>("world_frame_id",world_frame_id,"/world");
9     nh\&.param<string>("target_frame_id",target_frame_id,"/target");
10     nh\&.param<double>("target/safe_corridor_r",traj_option\&.safe_r,0\&.2);
11     nh\&.param<int>("target/N_safe_pnts",traj_option\&.N_safe_pnts,2);
12     nh\&.param<int>("target/objective_derivative",traj_option\&.objective_derivative,3);
13     nh\&.param<int>("target/poly_order",traj_option\&.poly_order,6);
14     nh\&.param<double>("target/w_deviation",traj_option\&.w_d,0\&.005);
15     nh\&.param<bool>("target/is_waypoint_soft",traj_option\&.is_waypoint_soft,false);
16     
17     nh\&.param("min_z",min_z,0\&.4);   
18 
19     // register 
20     pub_marker_waypoints = nh\&.advertise<visualization_msgs::MarkerArray>("target_waypoints",1);
21     sub_waypoints = nh\&.subscribe("/target_waypoints",1,&TargetManager::callback_waypoint,this);
22     pub_path = nh\&.advertise<nav_msgs::Path>("target_global_path",1);
23     br_ptr = new tf::TransformBroadcaster();
24 }
.fi
.SS "void TargetManager::pop_waypoint ()"

.PP
.nf
101                                 {
102     queue\&.pop_back();
103     wpnt_markerArray\&.markers\&.pop_back();
104     ROS_INFO("[Target manager] queue pop ");    
105 }
.fi
.SS "void TargetManager::queue_file_load (vector< geometry_msgs::PoseStamped > & wpnt_replace)"

.PP
.nf
124                                                                                  {
125 
126     this->queue = wpnt_replace;
127     wpnt_markerArray\&.markers\&.clear();
128 
129     
130     for(auto it = wpnt_replace\&.begin();it<wpnt_replace\&.end();it++){
131         
132         visualization_msgs::Marker marker;
133 
134         marker\&.action = 0;
135         marker\&.header\&.frame_id  = world_frame_id;
136         marker\&.type = visualization_msgs::Marker::CUBE;
137         marker\&.pose = it->pose;
138         
139         std::cout<< it->pose\&.position\&.x <<" , "<< it->pose\&.position\&.y <<" , "<<it->pose\&.position\&.z<<std::endl;
140 
141         float scale = 0\&.1;
142         marker\&.scale\&.x = scale;
143         marker\&.scale\&.y = scale;
144         marker\&.scale\&.z = scale;
145         marker\&.color\&.r = 1;
146         marker\&.color\&.b = 1;
147 
148         marker\&.color\&.a = 1;
149         marker\&.id = wpnt_markerArray\&.markers\&.size();
150         wpnt_markerArray\&.markers\&.push_back(marker);
151         
152     }
153 
154 }
.fi
.SS "void TargetManager::queue_file_load (int, vector< geometry_msgs::PoseStamped > &)"

.SS "void TargetManager::session (double t_eval)"

.PP
.nf
86                                         {
87 
88     pub_marker_waypoints\&.publish(wpnt_markerArray);
89     if(is_path){
90         pub_path\&.publish(global_path);
91         broadcast_target_tf(t_eval);
92     }
93 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "tf::TransformBroadcaster* TargetManager::br_ptr\fC [private]\fP"

.SS "double TargetManager::button_elapsed =0"

.SS "double TargetManager::cur_spline_eval_time = 0"

.SS "nav_msgs::Path TargetManager::global_path\fC [private]\fP"

.SS "bool TargetManager::is_insert_permit = false"

.SS "bool TargetManager::is_path = false"

.SS "double TargetManager::min_z\fC [private]\fP"

.SS "int TargetManager::mode\fC [private]\fP"

.SS "PathPlanner TargetManager::planner\fC [private]\fP"

.SS "double TargetManager::previous_elapsed =0"

.SS "ros::Publisher TargetManager::pub_marker_waypoints\fC [private]\fP"

.SS "ros::Publisher TargetManager::pub_path\fC [private]\fP"

.SS "vector<geometry_msgs::PoseStamped> TargetManager::queue"

.SS "ros::Subscriber TargetManager::sub_waypoints\fC [private]\fP"

.SS "string TargetManager::target_frame_id\fC [private]\fP"

.SS "TrajGenOpts TargetManager::traj_option\fC [private]\fP"

.SS "nav_msgs::Path TargetManager::waypoints_seq\fC [private]\fP"

.SS "string TargetManager::world_frame_id\fC [private]\fP"

.SS "visualization_msgs::MarkerArray TargetManager::wpnt_markerArray\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
