.TH "/home/jbs/catkin_ws/src/traj_gen_vis_developing/include/auto_chaser/Common.h" 3 "Wed Apr 17 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/jbs/catkin_ws/src/traj_gen_vis_developing/include/auto_chaser/Common.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <ros/ros\&.h>\fP
.br
\fC#include <sensor_msgs/PointCloud2\&.h>\fP
.br
\fC#include <geometry_msgs/PoseStamped\&.h>\fP
.br
\fC#include <geometry_msgs/Point\&.h>\fP
.br
\fC#include <visualization_msgs/MarkerArray\&.h>\fP
.br
\fC#include <octomap_msgs/conversions\&.h>\fP
.br
\fC#include <octomap_msgs/Octomap\&.h>\fP
.br
\fC#include <std_msgs/Header\&.h>\fP
.br
\fC#include <std_msgs/ColorRGBA\&.h>\fP
.br
\fC#include <nav_msgs/Path\&.h>\fP
.br
\fC#include <mav_msgs/default_topics\&.h>\fP
.br
\fC#include <mav_msgs/conversions\&.h>\fP
.br
\fC#include <trajectory_msgs/MultiDOFJointTrajectory\&.h>\fP
.br
\fC#include <octomap/octomap\&.h>\fP
.br
\fC#include <octomap/OcTree\&.h>\fP
.br
\fC#include <octomap/OcTreeBase\&.h>\fP
.br
\fC#include <octomap/octomap_types\&.h>\fP
.br
\fC#include <dynamicEDT3D/dynamicEDTOctomap\&.h>\fP
.br
\fC#include <eigen3/Eigen/Core>\fP
.br
\fC#include <boost/config\&.hpp>\fP
.br
\fC#include <boost/graph/adjacency_list\&.hpp>\fP
.br
\fC#include <boost/graph/dijkstra_shortest_paths\&.hpp>\fP
.br
\fC#include <boost/graph/graph_traits\&.hpp>\fP
.br
\fC#include <boost/graph/iteration_macros\&.hpp>\fP
.br
\fC#include <boost/graph/properties\&.hpp>\fP
.br
\fC#include <boost/property_map/property_map\&.hpp>\fP
.br
\fC#include <tf/tf\&.h>\fP
.br
\fC#include <tf/transform_listener\&.h>\fP
.br
\fC#include <tf/transform_broadcaster\&.h>\fP
.br
\fC#include <string>\fP
.br
\fC#include <memory>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <map>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <chrono>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBNode< T >\fP"
.br
.ti -1c
.RI "struct \fBFieldParams\fP"
.br
.ti -1c
.RI "struct \fBchaser::PreplannerParams\fP"
.br
.ti -1c
.RI "struct \fBchaser::SmoothplannerParams\fP"
.br
.ti -1c
.RI "struct \fBGridField\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBchaser\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBGetCurrentDir\fP   getcwd"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef double \fBWeight\fP"
.br
.ti -1c
.RI "typedef boost::property< boost::edge_weight_t, \fBWeight\fP > \fBWeightProperty\fP"
.br
.ti -1c
.RI "typedef boost::property< boost::vertex_name_t, Point > \fBNameProperty\fP"
.br
.ti -1c
.RI "typedef boost::adjacency_list< boost::listS, boost::vecS, boost::directedS, \fBNameProperty\fP, \fBWeightProperty\fP > \fBGraph\fP"
.br
.ti -1c
.RI "typedef boost::graph_traits< \fBGraph\fP >::vertex_descriptor \fBVertex_d\fP"
.br
.ti -1c
.RI "typedef string \fBVertexName\fP"
.br
.ti -1c
.RI "typedef boost::property_map< \fBGraph\fP, boost::vertex_index_t >::type \fBIndexMap\fP"
.br
.ti -1c
.RI "typedef boost::property_map< \fBGraph\fP, boost::vertex_name_t >::type \fBNameMap\fP"
.br
.ti -1c
.RI "typedef boost::iterator_property_map< \fBVertex_d\fP *, \fBIndexMap\fP, \fBVertex_d\fP, \fBVertex_d\fP & > \fBPredecessorMap\fP"
.br
.ti -1c
.RI "typedef boost::iterator_property_map< \fBWeight\fP *, \fBIndexMap\fP, \fBWeight\fP, \fBWeight\fP & > \fBDistanceMap\fP"
.br
.ti -1c
.RI "typedef vector< Point > \fBVertexPath\fP"
.br
.ti -1c
.RI "typedef map< \fBVertexName\fP, \fBVertex_d\fP > \fBDescriptorMap\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "std::string \fBGetCurrentWorkingDir\fP (void)"
.br
.ti -1c
.RI "vector< Point > \fBextract_pnts_from_path\fP (nav_msgs::Path)"
.br
.ti -1c
.RI "Vector3f \fBgeo2eigen\fP (const Point &)"
.br
.ti -1c
.RI "void \fBget_color\fP (float x_in, float &r, float &g, float &b)"
.br
.ti -1c
.RI "void \fBget_color_dist\fP (float dist_val, std_msgs::ColorRGBA &color, float max_plot_dist_val)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define GetCurrentDir   getcwd"

.SH "Typedef Documentation"
.PP 
.SS "typedef map<\fBVertexName\fP,\fBVertex_d\fP> \fBDescriptorMap\fP"

.SS "typedef boost::iterator_property_map< \fBWeight\fP*, \fBIndexMap\fP, \fBWeight\fP, \fBWeight\fP& > \fBDistanceMap\fP"

.SS "typedef boost::adjacency_list< boost::listS, boost::vecS, boost::directedS, \fBNameProperty\fP, \fBWeightProperty\fP > \fBGraph\fP"

.SS "typedef boost::property_map< \fBGraph\fP, boost::vertex_index_t >::type \fBIndexMap\fP"

.SS "typedef boost::property_map< \fBGraph\fP, boost::vertex_name_t >::type \fBNameMap\fP"

.SS "typedef boost::property<boost::vertex_name_t, Point> \fBNameProperty\fP"

.SS "typedef boost::iterator_property_map< \fBVertex_d\fP*, \fBIndexMap\fP, \fBVertex_d\fP, \fBVertex_d\fP& > \fBPredecessorMap\fP"

.SS "typedef boost::graph_traits< \fBGraph\fP >::vertex_descriptor \fBVertex_d\fP"

.SS "typedef string \fBVertexName\fP"

.SS "typedef vector<Point> \fBVertexPath\fP"

.SS "typedef double \fBWeight\fP"
Boost graph library 
.SS "typedef boost::property<boost::edge_weight_t, \fBWeight\fP> \fBWeightProperty\fP"

.SH "Function Documentation"
.PP 
.SS "vector<Point> extract_pnts_from_path (nav_msgs::Path)"
Functions 
.PP
.nf
10                                                        {
11 
12   vector<Point> pnt_seq;
13   for(auto it = path\&.poses\&.begin(); it<path\&.poses\&.end();it++){
14     pnt_seq\&.push_back(it->pose\&.position);
15   }
16   return pnt_seq;
17 };
.fi
.SS "Vector3f geo2eigen (const Point &)"

.PP
.nf
19                                     {
20 
21   return Vector3f(pnt\&.x,pnt\&.y,pnt\&.z);
22 };
.fi
.SS "void get_color (float x_in, float & r, float & g, float & b)"

.PP
.nf
51 {
52   // Only important if the number of colors is small\&. In which case the rest is
53   // still wrong anyway
54   // x = linspace(0,1,jj)' * (1-1/jj) + 1/jj;
55   //
56   const double rone = 0\&.8;
57   const double gone = 1\&.0;
58   const double bone = 1\&.0;
59   float x = x_in;
60   x = (x_in<0 ? 0 : (x>1 ? 1 : x));
61 
62   if (x<1\&. / 8\&.)
63   {
64     r = 0;
65     g = 0;
66     b = bone*(0\&.5 + (x) / (1\&. / 8\&.)*0\&.5);
67   } else if (x<3\&. / 8\&.)
68   {
69     r = 0;
70     g = gone*(x - 1\&. / 8\&.) / (3\&. / 8\&. - 1\&. / 8\&.);
71     b = bone;
72   } else if (x<5\&. / 8\&.)
73   {
74     r = rone*(x - 3\&. / 8\&.) / (5\&. / 8\&. - 3\&. / 8\&.);
75     g = gone;
76     b = (bone - (x - 3\&. / 8\&.) / (5\&. / 8\&. - 3\&. / 8\&.));
77   } else if (x<7\&. / 8\&.)
78   {
79     r = rone;
80     g = (gone - (x - 5\&. / 8\&.) / (7\&. / 8\&. - 5\&. / 8\&.));
81     b = 0;
82   } else
83   {
84     r = (rone - (x - 7\&. / 8\&.) / (1\&. - 7\&. / 8\&.)*0\&.5);
85     g = 0;
86     b = 0;
87   }
88 }
.fi
.SS "void get_color_dist (float dist_val, std_msgs::ColorRGBA & color, float max_plot_dist_val)"

.PP
.nf
25                                                                                      {
26 // error region 
27   if(dist_val<0){
28       color\&.r = 0\&.5;
29       color\&.g = 0\&.0;
30       color\&.b = 0\&.0;
31       color\&.a = 0\&.2;
32 
33   }
34 //   else if(dist_val == 0\&.2){
35 //       color\&.r = 0;
36 //       color\&.g = 0;
37 //       color\&.b = 1;
38 //   }
39   // normal region 
40   else{                   
41       color\&.r = pow(dist_val/max_plot_dist_val,3);
42       color\&.g = pow(dist_val/max_plot_dist_val,3);
43       color\&.b = pow(dist_val/max_plot_dist_val,3);
44   }
45   // plot only cells in this bound
46   if(dist_val<max_plot_dist_val)
47       color\&.a = 0\&.2;
48 };
.fi
.SS "std::string GetCurrentWorkingDir (void)"

.PP
.nf
2                                       {
3     char buff[FILENAME_MAX];
4     GetCurrentDir( buff, FILENAME_MAX );
5     std::string current_working_dir(buff);
6     return current_working_dir; 
7 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
