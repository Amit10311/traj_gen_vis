.TH "ObjectsHandler" 3 "Wed Apr 17 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ObjectsHandler \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ObjectHandler\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBObjectsHandler\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "void \fBcompute_edf\fP ()"
.br
.ti -1c
.RI "\fBObjectsHandler\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "PoseStamped \fBget_target_pose\fP ()"
.br
.ti -1c
.RI "PoseStamped \fBget_chaser_pose\fP ()"
.br
.ti -1c
.RI "Twist \fBget_chaser_velocity\fP ()"
.br
.ti -1c
.RI "Twist \fBget_chaser_acceleration\fP ()"
.br
.ti -1c
.RI "string \fBget_world_frame_id\fP ()"
.br
.ti -1c
.RI "octomap::OcTree * \fBget_octree_obj_ptr\fP ()"
.br
.ti -1c
.RI "\fBGridField\fP * \fBget_edf_grid_ptr\fP ()"
.br
.ti -1c
.RI "void \fBoctomap_callback\fP (const octomap_msgs::Octomap &msg)"
.br
.ti -1c
.RI "void \fBchaser_spawn\fP (PoseStamped spawn_pose)"
.br
.ti -1c
.RI "void \fBcallback_chaser_init_pose\fP (const geometry_msgs::PoseStampedConstPtr &chaser_init_pose)"
.br
.ti -1c
.RI "void \fBcallback_chaser_control_pose\fP (const geometry_msgs::PoseStampedConstPtr &chaser_control_pose)"
.br
.RI "\fIcallback function for control pose from wrapper\&. This is intended to replace the currnet chaser pose directly with desired pose \fP"
.ti -1c
.RI "void \fBtf_update\fP ()"
.br
.ti -1c
.RI "void \fBpublish\fP ()"
.br
.ti -1c
.RI "vector< Point > \fBget_prediction_seq\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBis_octomap_full\fP = false"
.br
.ti -1c
.RI "bool \fBis_chaser_recieved\fP = false"
.br
.ti -1c
.RI "bool \fBis_map_recieved\fP = false"
.br
.ti -1c
.RI "bool \fBis_target_recieved\fP = false"
.br
.ti -1c
.RI "bool \fBis_control_received\fP = false"
.br
.ti -1c
.RI "bool \fBis_chaser_spawned\fP = false"
.br
.ti -1c
.RI "bool \fBis_insert_permit\fP = false"
.br
.ti -1c
.RI "bool \fBis_path_solved\fP = false"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "ros::Subscriber \fBsub_octomap\fP"
.br
.ti -1c
.RI "ros::Subscriber \fBsub_chaser_init_pose\fP"
.br
.ti -1c
.RI "ros::Subscriber \fBsub_chaser_control_pose\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_edf\fP"
.br
.ti -1c
.RI "visualization_msgs::Marker \fBmarkers_edf\fP"
.br
.ti -1c
.RI "tf::TransformListener * \fBtf_listener\fP"
.br
.ti -1c
.RI "tf::TransformBroadcaster * \fBtf_talker\fP"
.br
.ti -1c
.RI "string \fBworld_frame_id\fP"
.br
.ti -1c
.RI "string \fBchaser_frame_id\fP"
.br
.ti -1c
.RI "string \fBtarget_frame_id\fP"
.br
.ti -1c
.RI "string \fBoctomap_topic_name\fP"
.br
.ti -1c
.RI "PoseStamped \fBtarget_pose\fP"
.br
.ti -1c
.RI "PoseStamped \fBchaser_pose\fP"
.br
.ti -1c
.RI "Twist \fBchaser_vel\fP"
.br
.ti -1c
.RI "Twist \fBchaser_acc\fP"
.br
.ti -1c
.RI "shared_ptr< octomap::OcTree > \fBoctree_ptr\fP"
.br
.ti -1c
.RI "DynamicEDTOctomap * \fBedf_ptr\fP"
.br
.ti -1c
.RI "shared_ptr< \fBGridField\fP > \fBedf_grid_ptr\fP"
.br
.ti -1c
.RI "double \fBmin_z\fP"
.br
.ti -1c
.RI "double \fBchaser_init_z\fP"
.br
.ti -1c
.RI "double \fBedf_max_viz_dist\fP"
.br
.ti -1c
.RI "double \fBedf_max_dist\fP"
.br
.ti -1c
.RI "\fBFieldParams\fP \fBedf_grid_params\fP"
.br
.ti -1c
.RI "int \fBrun_mode\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ObjectsHandler::ObjectsHandler ()\fC [inline]\fP"

.PP
.nf
56 {};
.fi
.SS "ObjectsHandler::ObjectsHandler (ros::NodeHandle nh)"

.PP
.nf
3 {};
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ObjectsHandler::callback_chaser_control_pose (const geometry_msgs::PoseStampedConstPtr & chaser_control_pose)"

.PP
callback function for control pose from wrapper\&. This is intended to replace the currnet chaser pose directly with desired pose 
.PP
\fBParameters:\fP
.RS 4
\fIchaser_control_pose\fP 
.RE
.PP

.PP
.nf
278                                                                                                             {
279     if(run_mode == 0 and is_path_solved){
280         chaser_pose = *chaser_control_pose;
281     }
282     
283 }
.fi
.SS "void ObjectsHandler::callback_chaser_init_pose (const geometry_msgs::PoseStampedConstPtr & chaser_init_pose)"

.PP
.nf
269                                                                                                       {
270 
271     chaser_spawn(*chaser_init_pose);    
272 }
.fi
.SS "void ObjectsHandler::chaser_spawn (PoseStamped spawn_pose)"

.PP
.nf
253                                                        {
254     ROS_INFO_ONCE("[Objects handler] spawning chaser\&."); 
255     
256     is_chaser_recieved = true;
257     is_chaser_spawned = true;    
258     
259     if(run_mode == 0){ // without gazebo : update chaser pose
260         chaser_pose = spawn_pose;
261         chaser_pose\&.pose\&.position\&.z = chaser_init_z;
262 
263     }else{ // with gazebo : nothing happen 
264         ROS_WARN("[Object Handler] gazebo mode\&. No virtual spawning happens");        
265     }
266 
267 }
.fi
.SS "void ObjectsHandler::compute_edf ()"

.PP
.nf
222                                 {
223 
224     for(int ix = 0 ; ix<edf_grid_ptr\&.get()->Nx ; ix++)
225         for(int iy = 0 ; iy<edf_grid_ptr\&.get()->Ny ; iy++)
226             for(int iz = 0 ; iz<edf_grid_ptr\&.get()->Nz ; iz++){
227                 Point eval_pnt = edf_grid_ptr\&.get()->getCellPnt(Vector3i(ix,iy,iz));  
228                 // query edf value from edf mapper                       
229                 float dist_val = edf_ptr->getDistance(octomap::point3d(eval_pnt\&.x,eval_pnt\&.y,eval_pnt\&.z));
230 
231                 // edf value assign to homogenous grid  
232                 edf_grid_ptr\&.get()->field_vals[ix][iy][iz] = dist_val;
233 
234                 // marker generation
235                 if(dist_val<edf_max_viz_dist){                
236                     // color 
237                     std_msgs::ColorRGBA color;                    
238                     get_color_dist(dist_val,color,edf_max_viz_dist);
239 
240                     // marker 
241                     markers_edf\&.points\&.push_back(eval_pnt);
242                     markers_edf\&.colors\&.push_back(color);                    
243                 }
244             }    
245 
246 }
.fi
.SS "Twist ObjectsHandler::get_chaser_acceleration ()"

.PP
.nf
120 {return chaser_acc;};
.fi
.SS "PoseStamped ObjectsHandler::get_chaser_pose ()"

.PP
.nf
118 {return chaser_pose;};
.fi
.SS "Twist ObjectsHandler::get_chaser_velocity ()"

.PP
.nf
119 {return chaser_vel;};
.fi
.SS "\fBGridField\fP * ObjectsHandler::get_edf_grid_ptr ()"

.PP
.nf
123 {return edf_grid_ptr\&.get();};
.fi
.SS "octomap::OcTree * ObjectsHandler::get_octree_obj_ptr ()"

.PP
.nf
122 {return octree_ptr\&.get();};
.fi
.SS "vector< Point > ObjectsHandler::get_prediction_seq ()"

.PP
.nf
286                                                 {
287     
288     
289 }
.fi
.SS "PoseStamped ObjectsHandler::get_target_pose ()"

.PP
.nf
111                                             {
112     PoseStamped pose(target_pose); 
113     pose\&.pose\&.position\&.z = min_z; 
114     return pose;
115 };
.fi
.SS "string ObjectsHandler::get_world_frame_id ()"

.PP
.nf
121 {return world_frame_id;};
.fi
.SS "void ObjectsHandler::init (ros::NodeHandle nh)"

.PP
.nf
5                                          {
6 
7     // parameters
8     nh\&.param<string>("world_frame_id",this->world_frame_id,"/world");
9     nh\&.param<string>("target_frame_id",this->target_frame_id,"/target__base_footprint");
10     nh\&.param<string>("chaser_frame_id",this->chaser_frame_id,"/firefly/base_link"); 
11 
12     // for chaser spawning 
13      
14     // edf grid param
15     nh\&.param("min_z",min_z,0\&.4);   
16     nh\&.param("chaser_init_z",chaser_init_z,1\&.0);             
17     nh\&.param("edf_max_dist",edf_max_dist,2\&.0);  
18     nh\&.param("edf_max_plot_dist",edf_max_viz_dist,0\&.5);  
19     nh\&.param("edf_resolution",edf_grid_params\&.resolution,0\&.5);  
20     nh\&.param("edf_stride_resolution",edf_grid_params\&.ray_stride_res,0\&.3);  
21     nh\&.param("run_mode",run_mode,0);  
22 
23 
24     target_pose\&.header\&.frame_id = world_frame_id;
25     chaser_pose\&.header\&.frame_id = world_frame_id;
26     markers_edf\&.header\&.frame_id = world_frame_id;
27 
28     markers_edf\&.action = visualization_msgs::Marker::ADD;
29     markers_edf\&.type = visualization_msgs::Marker::CUBE_LIST;      
30     markers_edf\&.pose\&.orientation\&.x = 0;
31     markers_edf\&.pose\&.orientation\&.y = 0;
32     markers_edf\&.pose\&.orientation\&.z = 0;
33     markers_edf\&.pose\&.orientation\&.w = 1;                  
34     markers_edf\&.scale\&.x = edf_grid_params\&.resolution;
35     markers_edf\&.scale\&.y = edf_grid_params\&.resolution;
36     markers_edf\&.scale\&.z = edf_grid_params\&.resolution;
37     
38     
39     // topics 
40     tf_listener = new (tf::TransformListener);
41     tf_talker = new (tf::TransformBroadcaster);
42 
43     pub_edf = nh\&.advertise<visualization_msgs::Marker>("edf_grid",1);
44 
45     // octomap            
46     nh\&.param("is_octomap_full",this->is_octomap_full,true);
47     octree_ptr\&.reset(new octomap::OcTree(0\&.1)); // arbitrary init
48     if (is_octomap_full)
49         sub_octomap = nh\&.subscribe("/octomap_full",1,&ObjectsHandler::octomap_callback,this);   
50     else
51         sub_octomap = nh\&.subscribe("/octomap_binary",1,&ObjectsHandler::octomap_callback,this);   
52 
53     sub_chaser_init_pose = nh\&.subscribe("/chaser_init_pose",1,&ObjectsHandler::callback_chaser_init_pose,this);
54     sub_chaser_control_pose = nh\&.subscribe("mav_pose_desired",1,&ObjectsHandler::callback_chaser_control_pose,this);
55     
56     ROS_INFO("Object handler initialized\&."); 
57 }
.fi
.SS "void ObjectsHandler::octomap_callback (const octomap_msgs::Octomap & msg)"

.PP
.nf
59                                                                    {
60     // we receive only once from octoamp server
61     if (not is_map_recieved){
62 
63         // octomap subscribing 
64         octomap::AbstractOcTree* octree;
65 
66         if(is_octomap_full)
67             octree=octomap_msgs::fullMsgToMap(msg);
68         else
69             octree=octomap_msgs::binaryMsgToMap(msg);
70 
71         this->octree_ptr\&.reset((dynamic_cast<octomap::OcTree*>(octree)));
72 
73         ROS_INFO_ONCE("[Objects handler] octomap received\&.");
74         double x,y,z;
75         octree_ptr\&.get()->getMetricMin(x,y,z);
76         octomap::point3d boundary_min(x,y,z); 
77         boundary_min\&.z() = min_z;
78         octree_ptr\&.get()->getMetricMax(x,y,z);
79         octomap::point3d boundary_max(x,y,z); 
80 
81         bool unknownAsOccupied = false;
82 
83 
84         std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
85 
86         // Euclidean distance transform  
87         edf_ptr = new DynamicEDTOctomap(edf_max_dist,octree_ptr\&.get(),
88         boundary_min,
89         boundary_max,unknownAsOccupied);
90         edf_ptr->update();    
91 
92         std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
93         double diff = std::chrono::duration_cast<chrono::nanoseconds>( end - begin )\&.count()*1e-9;
94         ROS_INFO("[Objects handler] dynamic EDT computed in %f [sec]",diff);
95 
96         // generate homogenous grid 
97         edf_grid_params\&.x0 = boundary_min\&.x();
98         edf_grid_params\&.y0 = boundary_min\&.y();
99         edf_grid_params\&.z0 = min_z;
100         edf_grid_params\&.lx = boundary_max\&.x() - boundary_min\&.x();
101         edf_grid_params\&.ly = boundary_max\&.y() - boundary_min\&.y();
102         edf_grid_params\&.lz = (boundary_max\&.z() - min_z);
103         edf_grid_ptr\&.reset(new GridField(edf_grid_params));
104         compute_edf();
105 
106         is_map_recieved = true;
107     }
108 };
.fi
.SS "void ObjectsHandler::publish ()"

.PP
.nf
248                             {
249 
250     pub_edf\&.publish(markers_edf);
251 }
.fi
.SS "void ObjectsHandler::tf_update ()"

.PP
.nf
126                               {
127     
128     
129     if(run_mode == 1){
130         // mode 1 : gazebo simulation mode 
131         // chaser(from gazebo) and target(from target manager) to be listened\&.  
132         string objects_frame_id[2];
133         objects_frame_id[0] = target_frame_id;
134         objects_frame_id[1] = chaser_frame_id;
135         
136         for (int i=0;i<2;i++){            
137             tf::StampedTransform transform;    
138             // 
139             try{
140                 tf_listener->lookupTransform(world_frame_id,objects_frame_id[i],ros::Time(0), transform);
141                 PoseStamped pose_stamped;
142                 pose_stamped\&.header\&.stamp = ros::Time::now();
143                 pose_stamped\&.header\&.frame_id = world_frame_id;
144 
145                 pose_stamped\&.pose\&.position\&.x = transform\&.getOrigin()\&.getX();
146                 pose_stamped\&.pose\&.position\&.y = transform\&.getOrigin()\&.getY();
147                 pose_stamped\&.pose\&.position\&.z = transform\&.getOrigin()\&.getZ();
148 
149                 pose_stamped\&.pose\&.orientation\&.x = transform\&.getRotation()\&.getX();
150                 pose_stamped\&.pose\&.orientation\&.y = transform\&.getRotation()\&.getY();
151                 pose_stamped\&.pose\&.orientation\&.z = transform\&.getRotation()\&.getZ();
152                 pose_stamped\&.pose\&.orientation\&.w = transform\&.getRotation()\&.getW();
153 
154 
155 
156                 if (i==0)
157                     {ROS_INFO_ONCE("[Objects handler] tf of target received\&. "); is_target_recieved = true; target_pose = pose_stamped;} 
158                 else
159                     {ROS_INFO_ONCE("[Objects handler] tf of chaser received\&. "); is_chaser_recieved = true;
160                              chaser_pose = pose_stamped; is_chaser_spawned = true;}  
161 
162             }
163             catch (tf::TransformException ex){
164                 if (i==0)
165                     ROS_ERROR_ONCE("[Objects handler] tf of target does not exist\&. ",ex\&.what());  
166                 else
167                     ROS_ERROR_ONCE("[Objects handler] tf of chaser does not exist\&. ",ex\&.what());  
168             
169             }
170         }
171 
172     }
173     else{
174         // mode 0 : no gazebo mode  
175         // target to be listened and chaser to be broadcast  
176 
177         // 1) target tf listen from target manager  
178         tf::StampedTransform transform;    
179         try{
180             tf_listener->lookupTransform(world_frame_id,target_frame_id,ros::Time(0), transform);
181             PoseStamped pose_stamped;
182             pose_stamped\&.header\&.stamp = ros::Time::now();
183             pose_stamped\&.header\&.frame_id = world_frame_id;
184 
185             pose_stamped\&.pose\&.position\&.x = transform\&.getOrigin()\&.getX();
186             pose_stamped\&.pose\&.position\&.y = transform\&.getOrigin()\&.getY();
187             pose_stamped\&.pose\&.position\&.z = transform\&.getOrigin()\&.getZ();
188 
189             pose_stamped\&.pose\&.orientation\&.x = transform\&.getRotation()\&.getX();
190             pose_stamped\&.pose\&.orientation\&.y = transform\&.getRotation()\&.getY();
191             pose_stamped\&.pose\&.orientation\&.z = transform\&.getRotation()\&.getZ();
192             pose_stamped\&.pose\&.orientation\&.w = transform\&.getRotation()\&.getW();        
193 
194             ROS_INFO_ONCE("[Objects handler] tf of target received\&. "); is_target_recieved = true; target_pose = pose_stamped;
195         }
196         catch (tf::TransformException ex){
197             ROS_ERROR_ONCE("[Objects handler] tf of target does not exist\&. ",ex\&.what());  
198         }    
199             
200         if(is_chaser_spawned){
201 
202             // 2) chaser tf broadcasting
203             tf::Quaternion q;
204             q\&.setX(chaser_pose\&.pose\&.orientation\&.x);
205             q\&.setY(chaser_pose\&.pose\&.orientation\&.y);
206             q\&.setZ(chaser_pose\&.pose\&.orientation\&.z);
207             q\&.setW(chaser_pose\&.pose\&.orientation\&.w);
208             
209             transform\&.setOrigin(tf::Vector3(chaser_pose\&.pose\&.position\&.x,chaser_pose\&.pose\&.position\&.y,chaser_pose\&.pose\&.position\&.z));
210             transform\&.setRotation(q);
211             tf_talker->sendTransform(tf::StampedTransform(transform,ros::Time::now(),world_frame_id,chaser_frame_id));        
212         }
213         else{
214             ROS_INFO_ONCE("[Objects handler] please spawn target\&. ");  
215         }
216      
217     }   
218 
219 
220 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "Twist ObjectsHandler::chaser_acc\fC [private]\fP"

.SS "string ObjectsHandler::chaser_frame_id\fC [private]\fP"

.SS "double ObjectsHandler::chaser_init_z\fC [private]\fP"

.SS "PoseStamped ObjectsHandler::chaser_pose\fC [private]\fP"

.SS "Twist ObjectsHandler::chaser_vel\fC [private]\fP"

.SS "\fBFieldParams\fP ObjectsHandler::edf_grid_params\fC [private]\fP"

.SS "shared_ptr<\fBGridField\fP> ObjectsHandler::edf_grid_ptr\fC [private]\fP"

.SS "double ObjectsHandler::edf_max_dist\fC [private]\fP"

.SS "double ObjectsHandler::edf_max_viz_dist\fC [private]\fP"

.SS "DynamicEDTOctomap* ObjectsHandler::edf_ptr\fC [private]\fP"

.SS "bool ObjectsHandler::is_chaser_recieved = false"

.SS "bool ObjectsHandler::is_chaser_spawned = false"

.SS "bool ObjectsHandler::is_control_received = false"

.SS "bool ObjectsHandler::is_insert_permit = false"

.SS "bool ObjectsHandler::is_map_recieved = false"

.SS "bool ObjectsHandler::is_octomap_full = false"

.SS "bool ObjectsHandler::is_path_solved = false"

.SS "bool ObjectsHandler::is_target_recieved = false"

.SS "visualization_msgs::Marker ObjectsHandler::markers_edf\fC [private]\fP"

.SS "double ObjectsHandler::min_z\fC [private]\fP"

.SS "string ObjectsHandler::octomap_topic_name\fC [private]\fP"

.SS "shared_ptr<octomap::OcTree> ObjectsHandler::octree_ptr\fC [private]\fP"

.SS "ros::Publisher ObjectsHandler::pub_edf\fC [private]\fP"

.SS "int ObjectsHandler::run_mode\fC [private]\fP"

.SS "ros::Subscriber ObjectsHandler::sub_chaser_control_pose\fC [private]\fP"

.SS "ros::Subscriber ObjectsHandler::sub_chaser_init_pose\fC [private]\fP"

.SS "ros::Subscriber ObjectsHandler::sub_octomap\fC [private]\fP"

.SS "string ObjectsHandler::target_frame_id\fC [private]\fP"

.SS "PoseStamped ObjectsHandler::target_pose\fC [private]\fP"

.SS "tf::TransformListener* ObjectsHandler::tf_listener\fC [private]\fP"

.SS "tf::TransformBroadcaster* ObjectsHandler::tf_talker\fC [private]\fP"

.SS "string ObjectsHandler::world_frame_id\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
