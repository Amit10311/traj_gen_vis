.TH "Wrapper" 3 "Wed Apr 17 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Wrapper \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Wrapper\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBWrapper\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "void \fBsession\fP (double t)"
.br
.ti -1c
.RI "bool \fBtrigger_chasing\fP (TimeSeries chasing_knots)"
.br
.ti -1c
.RI "bool \fBtrigger_chasing\fP (vector< Point > target_seq, TimeSeries chasing_knots)"
.br
.ti -1c
.RI "geometry_msgs::PoseStamped \fBget_control_pose\fP (double t_eval)"
.br
.RI "\fIevalate the latest control pose from chaser \fP"
.ti -1c
.RI "void \fBpub_control_pose\fP (double t_eval)"
.br
.RI "\fIpublish the control visualization (geometry_msgs) \fP"
.ti -1c
.RI "void \fBpub_control_traj\fP (double t_eval)"
.br
.RI "\fIpublish the control visualization (trajectory_msgs) \fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int \fBrun_mode\fP"
.br
.ti -1c
.RI "\fBObjectsHandler\fP \fBobjects_handler\fP"
.br
.ti -1c
.RI "\fBChaser\fP \fBchaser\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "ros::Publisher \fBpub_control_mav\fP"
.br
.RI "\fIpublish the control pose for UAV (trajectory_msgs) \fP"
.ti -1c
.RI "ros::Publisher \fBpub_control_mav_vis\fP"
.br
.RI "\fIpublishing the control pose visualization(geometry_msgs) \fP"
.ti -1c
.RI "geometry_msgs::PoseStamped \fBcontrol_pose_mav\fP"
.br
.RI "\fIthis is used just for coordinate visualization \fP"
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Wrapper::Wrapper ()"

.PP
.nf
3 {};
.fi
.SH "Member Function Documentation"
.PP 
.SS "geometry_msgs::PoseStamped Wrapper::get_control_pose (double t_eval)"

.PP
evalate the latest control pose from chaser 
.PP
\fBParameters:\fP
.RS 4
\fIt_eval\fP the evaluation time 
.RE
.PP
\fBReturns:\fP
.RS 4
geometry_msgs::PoseStamped the control pose for MAV 
.RE
.PP

.PP
.nf
114                                                                {
115 
116     PoseStamped target_pose = objects_handler\&.get_target_pose(); // the current target pose of the latest
117     PoseStamped chaser_pose = objects_handler\&.get_chaser_pose(); // the current chaser pose of the latest
118     
119     // decide yawing direction so that the local x-axis heads to the target 
120     // For this, if the target has not been uploaded yet, then the MAV heads to the last observed target position 
121     float yaw = atan2(-chaser_pose\&.pose\&.position\&.y+target_pose\&.pose\&.position\&.y,
122                         -chaser_pose\&.pose\&.position\&.x+target_pose\&.pose\&.position\&.x);
123     tf::Quaternion q;
124     if(not chaser\&.is_complete_chasing_path)
125         q\&.setRPY(0,0,0); // should hovering first 
126     else
127         q\&.setRPY(0,0,yaw);
128     q\&.normalize(); // to avoid the numerical error 
129     PoseStamped chaser_pose_desired;  
130     Point chaser_point_desired = chaser\&.get_control_point(t_eval); 
131     chaser_pose_desired\&.header\&.frame_id = objects_handler\&.get_world_frame_id();
132     chaser_pose_desired\&.pose\&.position = chaser_point_desired;
133     chaser_pose_desired\&.pose\&.orientation\&.x = q\&.x();
134     chaser_pose_desired\&.pose\&.orientation\&.y = q\&.y();
135     chaser_pose_desired\&.pose\&.orientation\&.z = q\&.z();
136     chaser_pose_desired\&.pose\&.orientation\&.w = q\&.w();
137     return chaser_pose_desired;
138 }
.fi
.SS "void Wrapper::init (ros::NodeHandle nh)"

.PP
.nf
5                                    {
6     
7     // the initialization for its own member variables 
8     string mav_name;
9     nh\&.param<string>("mav_name",mav_name,"firefly");
10     nh\&.param("run_mode",run_mode,0);
11 
12     // this topic is used for the actual control 
13     string control_topic = "/" + mav_name + "/" + mav_msgs::default_topics::COMMAND_TRAJECTORY;
14 
15     pub_control_mav = nh\&.advertise<trajectory_msgs::MultiDOFJointTrajectory>(
16            control_topic\&.c_str(), 10);
17         
18     // only for visualization 
19     pub_control_mav_vis = nh\&.advertise<geometry_msgs::PoseStamped>("mav_pose_desired",1);
20     // sub classes initialization 
21     objects_handler\&.init(nh);  
22     chaser\&.init(nh);      
23 
24 
25 };
.fi
.SS "void Wrapper::pub_control_pose (double t_eval)"

.PP
publish the control visualization (geometry_msgs) 
.PP
\fBParameters:\fP
.RS 4
\fIt_eval\fP evaluation time 
.RE
.PP

.PP
.nf
144                                            {
145     pub_control_mav_vis\&.publish(get_control_pose(t_eval));
146 }
.fi
.SS "void Wrapper::pub_control_traj (double t_eval)"

.PP
publish the control visualization (trajectory_msgs) 
.PP
\fBParameters:\fP
.RS 4
\fIt_eval\fP 
.RE
.PP

.PP
.nf
152                                            {
153 
154     float chaser_yaw_desired;
155     PoseStamped chaser_pose_desired;
156 
157     // retrieve yaw first  
158     chaser_pose_desired = get_control_pose(t_eval);
159     
160     // convert the pose information into trajectory_msgs (only conversion)
161     
162     // get the position 
163     Vector3d chaser_point_desired;
164     chaser_point_desired(0) = chaser_pose_desired\&.pose\&.position\&.x;
165     chaser_point_desired(1) = chaser_pose_desired\&.pose\&.position\&.y;
166     chaser_point_desired(2) = chaser_pose_desired\&.pose\&.position\&.z;
167     // get the orientation 
168     tf::Quaternion q;
169     q\&.setX(chaser_pose_desired\&.pose\&.orientation\&.x);
170     q\&.setY(chaser_pose_desired\&.pose\&.orientation\&.y);
171     q\&.setZ(chaser_pose_desired\&.pose\&.orientation\&.z);
172     q\&.setW(chaser_pose_desired\&.pose\&.orientation\&.w);
173     tf::Matrix3x3 q_mat(q);
174     double roll,pitch,yaw;
175     q_mat\&.getRPY(roll,pitch,yaw);
176     // finishing the trajectory topic 
177     trajectory_msgs::MultiDOFJointTrajectory chaser_traj_desired;
178     mav_msgs::msgMultiDofJointTrajectoryFromPositionYaw(chaser_point_desired,yaw, &chaser_traj_desired);
179     pub_control_mav\&.publish(chaser_traj_desired);
180 }
.fi
.SS "void Wrapper::session (double t)"

.PP
.nf
28                              {
29     // (1) the information of objects handler 
30     objects_handler\&.publish();
31     objects_handler\&.tf_update();    
32     // (2) chaser
33     chaser\&.session(t);
34     // (3) wrapper 
35     if (chaser\&.is_complete_chasing_path or run_mode == 1){
36         pub_control_pose(t);
37         pub_control_traj(t);
38     }
39 }
.fi
.SS "bool Wrapper::trigger_chasing (TimeSeries chasing_knots)"

.PP
.nf
42                                                      {
43     
44     
45     double t_planning_start = chasing_knots(0);
46 
47     vector<Point>  target_pred_seq = objects_handler\&.get_prediction_seq();
48     GridField * edf_grid_ptr = objects_handler\&.get_edf_grid_ptr();
49     
50 
51     Point chaser_init_point;
52     Twist chaser_init_vel; 
53     Twist chaser_init_acc;
54 
55     if(not chaser\&.is_complete_chasing_path){    
56         chaser_init_point = objects_handler\&.get_chaser_pose()\&.pose\&.position;    
57         chaser_init_vel = objects_handler\&.get_chaser_velocity();
58         chaser_init_acc = objects_handler\&.get_chaser_acceleration();   
59     }
60     else{
61         chaser_init_point = chaser\&.eval_point(t_planning_start);
62         chaser_init_vel = chaser\&.eval_velocity(t_planning_start);
63         chaser_init_acc = chaser\&.eval_acceleration(t_planning_start);
64     }
65 
66     // chasing policy update 
67     bool is_success = chaser\&.chase_update(edf_grid_ptr,target_pred_seq,chaser_init_point,chaser_init_vel,chaser_init_acc,chasing_knots);   
68     if(is_success) 
69         objects_handler\&.is_path_solved = true; // at least once solved, 
70 
71     return is_success;
72 }
.fi
.SS "bool Wrapper::trigger_chasing (vector< Point > target_seq, TimeSeries chasing_knots)"

.PP
.nf
75                                                                                    {
76   
77 
78 
79     double t_planning_start = chasing_knots(0);
80 
81     GridField * edf_grid_ptr = objects_handler\&.get_edf_grid_ptr();
82 
83     Point chaser_init_point;
84     Twist chaser_init_vel; 
85     Twist chaser_init_acc;
86 
87     if(not chaser\&.is_complete_chasing_path){    
88         chaser_init_point = objects_handler\&.get_chaser_pose()\&.pose\&.position;    
89         chaser_init_vel = objects_handler\&.get_chaser_velocity();
90         chaser_init_acc = objects_handler\&.get_chaser_acceleration();   
91     }
92     else{
93         chaser_init_point = chaser\&.eval_point(t_planning_start);
94         chaser_init_vel = chaser\&.eval_velocity(t_planning_start);
95         chaser_init_acc = chaser\&.eval_acceleration(t_planning_start);
96     }
97 
98     // chasing policy update 
99     bool is_success = chaser\&.chase_update(edf_grid_ptr,target_pred_seq,chaser_init_point,chaser_init_vel,chaser_init_acc,chasing_knots);   
100 
101     if(is_success) 
102         objects_handler\&.is_path_solved = true; // at least once solved, 
103 
104     // chasing policy update 
105     return is_success;
106 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBChaser\fP Wrapper::chaser"

.SS "geometry_msgs::PoseStamped Wrapper::control_pose_mav\fC [private]\fP"

.PP
this is used just for coordinate visualization 
.SS "\fBObjectsHandler\fP Wrapper::objects_handler"

.SS "ros::Publisher Wrapper::pub_control_mav\fC [private]\fP"

.PP
publish the control pose for UAV (trajectory_msgs) 
.SS "ros::Publisher Wrapper::pub_control_mav_vis\fC [private]\fP"

.PP
publishing the control pose visualization(geometry_msgs) 
.SS "int Wrapper::run_mode"


.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
