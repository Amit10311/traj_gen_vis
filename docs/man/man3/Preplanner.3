.TH "Preplanner" 3 "Wed Apr 17 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Preplanner \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Preplanner\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPreplanner\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "void \fBpreplan\fP (\fBGridField\fP *global_edf_ptr, vector< Point > target_pnts, Point chaser_init)"
.br
.ti -1c
.RI "void \fBpublish\fP ()"
.br
.ti -1c
.RI "nav_msgs::Path \fBget_preplanned_waypoints\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBVertexPath\fP \fBdijkstra\fP (\fBVertex_d\fP v0, \fBVertex_d\fP vf)"
.br
.ti -1c
.RI "\fBFieldParams\fP \fBget_local_vsf_param_around_target\fP (Point target_pnt)"
.br
.ti -1c
.RI "void \fBcompute_visibility_field_seq\fP (\fBGridField\fP *global_edf, vector< Point > target_pnts)"
.br
.ti -1c
.RI "void \fBgraph_construct\fP (\fBGridField\fP *global_edf, Point x0)"
.br
.ti -1c
.RI "void \fBcompute_shortest_path\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBchaser::PreplannerParams\fP \fBparams\fP"
.br
.ti -1c
.RI "string \fBworld_frame_id\fP"
.br
.ti -1c
.RI "vector< shared_ptr< \fBGridField\fP > > \fBvsf_field_ptr_seq\fP"
.br
.ti -1c
.RI "\fBGraph\fP \fBdi_graph\fP"
.br
.ti -1c
.RI "\fBDescriptorMap\fP \fBdescriptor_map\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_vsf_vis\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_preplanned_path\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_waypoints\fP"
.br
.ti -1c
.RI "visualization_msgs::Marker \fBmarkers_visibility_field_base\fP"
.br
.ti -1c
.RI "visualization_msgs::MarkerArray \fBmarkers_visibility_field_seq\fP"
.br
.ti -1c
.RI "visualization_msgs::Marker \fBmarker_wpnts\fP"
.br
.ti -1c
.RI "nav_msgs::Path \fBpreplanned_path\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Preplanner::Preplanner ()"

.PP
.nf
3 {};
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Preplanner::compute_shortest_path ()\fC [private]\fP"

.PP
.nf
309                                       {
310 
311     ROS_INFO("shortest path requested\&.");
312     VertexPath solution_seq = dijkstra(descriptor_map["x0"],descriptor_map["xf"]);
313     // if path exist 
314     if(solution_seq\&.size()){
315 
316         solution_seq\&.pop_back();
317 
318         // from graph path to real path 
319         preplanned_path\&.poses\&.clear();
320         // marker update  
321         marker_wpnts\&.points\&.resize(solution_seq\&.size());
322         marker_wpnts\&.colors\&.resize(solution_seq\&.size());  
323 
324 
325         for(auto it = solution_seq\&.begin();it<solution_seq\&.end();it++){
326             geometry_msgs::PoseStamped pose_stamped;
327 
328             pose_stamped\&.pose\&.position = *it;
329             preplanned_path\&.poses\&.push_back(pose_stamped);
330 
331             marker_wpnts\&.colors\&.push_back(marker_wpnts\&.color);
332             marker_wpnts\&.points\&.push_back(*it);
333         }
334     
335     }
336     else
337         ROS_WARN("[Preplanner] The preplanning couldn't be updated\&. (smooth planner may try to make path on old preplan\&.) ");
338     
339     
340 }
.fi
.SS "void Preplanner::compute_visibility_field_seq (\fBGridField\fP * global_edf, vector< Point > target_pnts)\fC [private]\fP"

.PP
.nf
92                                                                                             {
93     vsf_field_ptr_seq\&.resize(target_pnts\&.size());
94     float numeric_threshold = 1e-2;
95     int t = 1;
96     float max_score = -1;  // for visualization 
97     // for each target pnt
98     for (auto it = target_pnts\&.begin();it<target_pnts\&.end();it++,t++){
99         
100         // get local conservative grid map around the current target point
101         int VSF_MODE = 1;
102         try{
103 
104             vsf_field_ptr_seq[t-1]\&.reset(new GridField(get_local_vsf_param_around_target(*it))); 
105         }
106         catch(bool ex){
107             ROS_ERROR("failed to make visibility scoric field\&.");
108 
109         }
110         // field value update with edf grid 
111         for(int ix = 0 ; ix<vsf_field_ptr_seq[t-1]\&.get()->Nx ; ix++)
112             for(int iy = 0 ; iy<vsf_field_ptr_seq[t-1]\&.get()->Ny ; iy++)
113                 for(int iz = 0 ; iz<vsf_field_ptr_seq[t-1]\&.get()->Nz ; iz++){
114                     
115                     // assign visibilty value with minimum clamping to evaluated node 
116                     Point eval_pnt = vsf_field_ptr_seq[t-1]\&.get()->getCellPnt(Vector3i(ix,iy,iz));      
117                     float vs = global_edf->getRayMin(*it,eval_pnt,params\&.vs_min); // visibility score from distance field                    
118                     vsf_field_ptr_seq[t-1]\&.get()->field_vals[ix][iy][iz] = vs;
119 
120                     // let's save the point if certain condition is satified (for graph construction)                
121                     
122                     Vector3i pnt_idx_in_edf = global_edf->getCellIdx(eval_pnt);
123                     float edf_val = global_edf->field_vals[pnt_idx_in_edf(0)][pnt_idx_in_edf(1)][pnt_idx_in_edf(2)];  
124                     Vector3f bearing_vec =(geo2eigen(eval_pnt) - geo2eigen(*it)); 
125                     float relative_dist = bearing_vec\&.norm();                      
126                     float azim = atan2(bearing_vec(2),Vector2f(bearing_vec(0),bearing_vec(1))\&.norm());
127                     
128                     if(edf_val > params\&.r_safe && // safe 
129                         relative_dist > params\&.d_trakcing_min && // tracking spec
130                         relative_dist < params\&.d_trakcing_max && // tracking spec
131                         vs > params\&.vs_min + numeric_threshold  && // non-occlusion
132                         azim < params\&.max_azim)  // tracking spec 
133                         // save
134                         vsf_field_ptr_seq[t-1]\&.get()->saved_points\&.push_back(eval_pnt);
135                     
136                     if (vs >= max_score)
137                         max_score = vs;
138 
139                 }
140         std::cout<<"[Preplanner] nodes at time "<<t<<" are "<<vsf_field_ptr_seq[t-1]\&.get()->saved_points\&.size()<<std::endl;
141     }
142 
143     // save the markers
144 
145     // marker initialization     
146     markers_visibility_field_seq\&.markers\&.clear();    
147 
148     markers_visibility_field_base\&.header\&.stamp = ros::Time::now();
149     markers_visibility_field_base\&.header\&.frame_id = world_frame_id;
150     markers_visibility_field_base\&.points\&.clear();
151     markers_visibility_field_base\&.colors\&.clear();
152     t = 1;
153 
154     for (auto it = target_pnts\&.begin();it<target_pnts\&.end();it++,t++){ // for time
155         int idx = 0;
156         markers_visibility_field_base\&.ns = "time_"+to_string(t);
157 
158         // we draw only saved points from above 
159         for (auto it_node = vsf_field_ptr_seq[t-1]\&.get()->saved_points\&.begin() ; it_node < vsf_field_ptr_seq[t-1]\&.get()->saved_points\&.end() ; it_node++,idx++){
160             Vector3i key = vsf_field_ptr_seq[t-1]\&.get()->getCellIdx(*it_node);
161             float vs = vsf_field_ptr_seq[t-1]\&.get()->field_vals[key(0)][key(1)][key(2)];
162             // std::cout<<vs<<std::endl;
163             // marker update
164             std_msgs::ColorRGBA color;
165             get_color((vs-params\&.vs_min)/(max_score-params\&.vs_min),color\&.r,color\&.g,color\&.b);            
166             color\&.a = 0\&.1;
167 
168             markers_visibility_field_base\&.colors\&.push_back(color);
169             markers_visibility_field_base\&.points\&.push_back(*it_node);
170             idx ++;
171         }
172 
173         markers_visibility_field_seq\&.markers\&.push_back(markers_visibility_field_base);
174         markers_visibility_field_base\&.points\&.clear();
175         markers_visibility_field_base\&.colors\&.clear();
176         
177     }
178 }
.fi
.SS "\fBVertexPath\fP Preplanner::dijkstra (\fBVertex_d\fP v0, \fBVertex_d\fP vf)\fC [private]\fP"

.PP
.nf
253                                                       {
254     
255 
256 
257     // Create things for Dijkstra
258     std::vector<Vertex_d> predecessors(boost::num_vertices(di_graph)); // To store parents
259     std::vector<Weight> distances(boost::num_vertices(di_graph)); // To store distances
260 
261     IndexMap indexMap = boost::get(boost::vertex_index, di_graph);
262     NameMap nameMap = boost::get(boost::vertex_name, di_graph);
263 
264     PredecessorMap predecessorMap(&predecessors[0], indexMap);
265     DistanceMap distanceMap(&distances[0], indexMap);    
266 
267     boost::dijkstra_shortest_paths(di_graph, v0, boost::distance_map(distanceMap)\&.predecessor_map(predecessorMap));
268 
269     typedef std::vector<Graph::edge_descriptor> PathType;
270 
271     PathType path;
272     Vertex_d v = vf; // We want to start at the destination and work our way back to the source
273     for(Vertex_d u = predecessorMap[v]; // Start by setting 'u' to the destintaion node's predecessor
274         u != v; // Keep tracking the path until we get to the source
275         v = u, u = predecessorMap[v]) // Set the current vertex to the current predecessor, and the predecessor to one level up
276     {
277         std::pair<Graph::edge_descriptor, bool> edgePair = boost::edge(u, v, di_graph);
278         Graph::edge_descriptor edge = edgePair\&.first;
279 
280         path\&.push_back( edge );
281     }
282 
283     if (path\&.size())
284     {
285        ROS_INFO("path exist");
286         // Write shortest path
287         float totalDistance = 0;
288 
289         VertexPath vertex_path1;
290         VertexPath vertex_path2;
291         for(PathType::reverse_iterator pathIterator = path\&.rbegin(); pathIterator != path\&.rend(); ++pathIterator)
292         {
293 
294 //            ROS_INFO("path insertion");
295             vertex_path1\&.push_back(nameMap[boost::source(*pathIterator, di_graph)]);
296             vertex_path2\&.push_back(nameMap[boost::target(*pathIterator, di_graph)]);
297         }
298 
299         vertex_path1\&.push_back(vertex_path2\&.back());
300         return vertex_path1;
301     }
302     else{
303         ROS_WARN("[Preplanner] path does not exist\&. returning zero length path\&. ");
304         return VertexPath();
305     }    
306 }
.fi
.SS "\fBFieldParams\fP Preplanner::get_local_vsf_param_around_target (Point target_pnt)\fC [private]\fP"

.PP
.nf
70                                                                          {
71 
72     FieldParams vsf_param;    
73     double lx,ly,lz;
74     // lx = ly = 2*params\&.d_trakcing_max * cos(params\&.max_azim);
75     lx = ly = 4*params\&.d_trakcing_max ;
76     lz = params\&.d_trakcing_max * sin(params\&.max_azim) - params\&.d_trakcing_min * sin(params\&.min_azim) ;
77 
78     vsf_param\&.x0 = target_pnt\&.x - lx/2;
79     vsf_param\&.y0 = target_pnt\&.y - ly/2;
80     vsf_param\&.z0 = target_pnt\&.z;
81     vsf_param\&.lx = lx;
82     vsf_param\&.ly = ly;
83     vsf_param\&.lz = lz;
84     
85     vsf_param\&.resolution = params\&.vsf_resolution;
86     vsf_param\&.ray_stride_res =  params\&.vsf_resolution; // not used for vsf grid 
87 
88     return vsf_param;
89 };
.fi
.SS "nav_msgs::Path Preplanner::get_preplanned_waypoints ()"

.PP
.nf
356 {return preplanned_path;}
.fi
.SS "void Preplanner::graph_construct (\fBGridField\fP * global_edf, Point x0)\fC [private]\fP"

.PP
.nf
181                                                               {
182     
183     // init graph with the initial position of chaser 
184     di_graph = Graph();
185     descriptor_map\&.clear();
186     
187     vector<Node<Point>> prev_layer;
188     Node<Point> initial_node; initial_node\&.value = x0; initial_node\&.name = "x0";
189     prev_layer\&.push_back(initial_node);
190     
191     Vertex_d v0 = boost::add_vertex(x0,di_graph);
192     descriptor_map\&.insert(make_pair(VertexName("x0"),v0));
193  
194     int H = vsf_field_ptr_seq\&.size(); // total prediction horizon 
195     int N_edge = 0; 
196     int N_edge_sub = 0;
197 
198     // in case of t = 0, we don't need (just current step)\&. 
199     for(int t = 1; t<H;t++){
200         N_edge_sub = 0;
201         GridField* cur_vsf_ptr = vsf_field_ptr_seq[t]\&.get();        
202         vector<Node<Point>> cur_layer = cur_vsf_ptr->generate_node(t); // current layer   
203 
204         for (auto it_cur = cur_layer\&.begin() ; it_cur<cur_layer\&.end(); it_cur++){
205             
206             // step1 :  let's register the node(pnt,name) in the current layer into graph 
207             Point cur_pnt = it_cur->value; Vector3f cur_vec = geo2eigen(cur_pnt); 
208             Vertex_d cur_vert = boost::add_vertex(cur_pnt,di_graph);
209             descriptor_map\&.insert(make_pair(it_cur->name,cur_vert));
210             
211             // call the previous layer  
212             GridField* prev_vsf_ptr = vsf_field_ptr_seq[t-1]\&.get();                        
213             
214             // step2 : let's connect with previous layer and add edges 
215             for(auto it_prev = prev_layer\&.begin(); it_prev < prev_layer\&.end();it_prev++){ // prev_layer 
216                 Vertex_d prev_vert = descriptor_map[it_prev->name];
217                 Point prev_pnt = it_prev->value; Vector3f prev_vec = geo2eigen(prev_pnt);
218 
219                 // this condition should be satisfied to be connected 
220                 if(((cur_vec-prev_vec)\&.norm() < params\&.d_connect_max) && (global_edf->getRayMin(cur_pnt,prev_pnt,0) > params\&.r_safe) ){
221                     float weight = (cur_vec-prev_vec)\&.norm() + 
222                             params\&.w_v*1/sqrt(cur_vsf_ptr->getRayMean(cur_pnt,prev_pnt) * prev_vsf_ptr->getRayMean(prev_pnt,cur_pnt)) 
223                             + params\&.w_d*abs((geo2eigen(cur_vsf_ptr->getCentre()) - cur_vec)\&.norm() - params\&.d_trakcing_des);                     
224                     boost::add_edge(prev_vert,cur_vert,weight,di_graph);
225                     if(weight <1e-4)
226                         ROS_WARN("weight is zero");
227                     N_edge ++;
228                     N_edge_sub++;
229                 }
230             }            
231         }
232         prev_layer = cur_layer;
233         cout<<"[Preplanner] connected edge to this layer: "<<N_edge_sub<<std::endl;
234     }
235     
236     cout<<"[Preplanner] total number of edges "<<N_edge<<std::endl;
237 
238 
239     // graph finishing 
240 
241     GridField* prev_vsf_ptr = vsf_field_ptr_seq[H-1]\&.get();
242     Vertex_d vf = boost::add_vertex(Point(),di_graph);
243     descriptor_map\&.insert(make_pair(VertexName("xf"),vf));
244 
245     // step2 : let's connect with previous layer 
246     for(auto it_prev = prev_layer\&.begin(); it_prev < prev_layer\&.end();it_prev++){ // prev_layer 
247         Vertex_d prev_vert = descriptor_map[it_prev->name];
248         // this condition should be satisfied to be connected 
249             boost::add_edge(prev_vert,vf,0,di_graph);
250     }
251 }
.fi
.SS "void Preplanner::init (ros::NodeHandle nh)"

.PP
.nf
5                                      {
6 
7     // preplanner params parsing 
8     nh\&.param("w_v",params\&.w_v,5\&.0);       
9     nh\&.param("w_d",params\&.w_d,1\&.5);            
10     nh\&.param("r_safe",params\&.r_safe,0\&.5);
11     nh\&.param("min_z",params\&.min_z,0\&.4);
12     nh\&.param("vs_min",params\&.vs_min,0\&.3);
13     nh\&.param("vsf_resolution",params\&.vsf_resolution,0\&.7);
14     nh\&.param("d_connect_max",params\&.d_connect_max,2\&.5);
15 
16     nh\&.param("max_tracking_distance",params\&.d_trakcing_max,4\&.0);
17     nh\&.param("min_tracking_distance",params\&.d_trakcing_min,1\&.0);
18     nh\&.param("des_tracking_distance",params\&.d_trakcing_des,2\&.5);
19     nh\&.param("max_azim",params\&.max_azim,(3\&.141592/4));
20     nh\&.param("min_azim",params\&.min_azim,(3\&.141592/7));
21 
22 
23     // world_frame_id 
24     nh\&.param<string>("world_frame_id",world_frame_id,"/world");
25     nh\&.param<string>("world_frame_id",markers_visibility_field_base\&.header\&.frame_id,"/world");
26     nh\&.param<string>("world_frame_id",preplanned_path\&.header\&.frame_id,"/world");
27 
28     // marker initialize 
29     
30     // waypoints 
31     marker_wpnts\&.header\&.frame_id = markers_visibility_field_base\&.header\&.frame_id;
32     marker_wpnts\&.ns = "waypoints";
33     marker_wpnts\&.id = 0;
34     marker_wpnts\&.type = visualization_msgs::Marker::SPHERE_LIST;
35     marker_wpnts\&.color\&.r = 14\&.0/255\&.0;
36     marker_wpnts\&.color\&.g = 50\&.0/255\&.0;
37     marker_wpnts\&.color\&.b = 1\&.0;
38     marker_wpnts\&.color\&.a = 0\&.3;
39     marker_wpnts\&.pose\&.orientation\&.w = 1\&.0;
40     double scale = 0\&.08; 
41     marker_wpnts\&.scale\&.x = scale;
42     marker_wpnts\&.scale\&.y = scale;
43     marker_wpnts\&.scale\&.z = scale;    
44 
45     // vsf_grid_seq 
46 
47     // marker base
48     visualization_msgs::Marker marker;
49     marker\&.header\&.frame_id = markers_visibility_field_base\&.header\&.frame_id;;
50     marker\&.action = visualization_msgs::Marker::ADD;
51     marker\&.type = visualization_msgs::Marker::CUBE_LIST;      
52     marker\&.pose\&.orientation\&.x = 0;
53     marker\&.pose\&.orientation\&.y = 0;
54     marker\&.pose\&.orientation\&.z = 0;
55     marker\&.pose\&.orientation\&.w = 1;                  
56     marker\&.scale\&.x = params\&.vsf_resolution;
57     marker\&.scale\&.y = params\&.vsf_resolution;
58     marker\&.scale\&.z = params\&.vsf_resolution;
59     markers_visibility_field_base = marker; 
60 
61 
62     // ros initialize 
63     pub_vsf_vis = nh\&.advertise<visualization_msgs::MarkerArray>("vsf_grid_seq",1);
64     pub_waypoints = nh\&.advertise<visualization_msgs::Marker>("preplanned_waypoints",1);    
65     pub_preplanned_path = nh\&.advertise<nav_msgs::Path>("preplanned_path",1);
66 
67 
68 };
.fi
.SS "void Preplanner::preplan (\fBGridField\fP * global_edf_ptr, vector< Point > target_pnts, Point chaser_init)"

.PP
.nf
343                                                                                          {
344 
345 
346 
347     // set the height of the moving target 
348     for(auto it = target_pnts\&.begin(); it<target_pnts\&.end(); it++)
349         it->z = params\&.min_z + 1e-3;
350 
351     compute_visibility_field_seq(global_edf,target_pnts);  
352     graph_construct(global_edf,chaser_init);        
353     compute_shortest_path();   
354 }
.fi
.SS "void Preplanner::publish ()"

.PP
.nf
358                         {
359     // vsf seq
360     pub_vsf_vis\&.publish(markers_visibility_field_seq);
361     // waypoints
362     pub_waypoints\&.publish(marker_wpnts);
363     // preplanned path 
364     pub_preplanned_path\&.publish(preplanned_path);
365 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBDescriptorMap\fP Preplanner::descriptor_map\fC [private]\fP"

.SS "\fBGraph\fP Preplanner::di_graph\fC [private]\fP"

.SS "visualization_msgs::Marker Preplanner::marker_wpnts\fC [private]\fP"

.SS "visualization_msgs::Marker Preplanner::markers_visibility_field_base\fC [private]\fP"

.SS "visualization_msgs::MarkerArray Preplanner::markers_visibility_field_seq\fC [private]\fP"

.SS "\fBchaser::PreplannerParams\fP Preplanner::params\fC [private]\fP"

.SS "nav_msgs::Path Preplanner::preplanned_path\fC [private]\fP"

.SS "ros::Publisher Preplanner::pub_preplanned_path\fC [private]\fP"

.SS "ros::Publisher Preplanner::pub_vsf_vis\fC [private]\fP"

.SS "ros::Publisher Preplanner::pub_waypoints\fC [private]\fP"

.SS "vector<shared_ptr<\fBGridField\fP> > Preplanner::vsf_field_ptr_seq\fC [private]\fP"

.SS "string Preplanner::world_frame_id\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
