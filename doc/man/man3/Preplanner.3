.TH "Preplanner" 3 "Tue Apr 9 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Preplanner \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Preplanner\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPreplanner\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "void \fBpreplan\fP (\fBGridField\fP *global_edf_ptr, vector< Point > target_pnts, Point chaser_init)"
.br
.ti -1c
.RI "void \fBpublish\fP ()"
.br
.ti -1c
.RI "nav_msgs::Path \fBget_preplanned_waypoints\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBVertexPath\fP \fBdijkstra\fP (\fBVertex_d\fP v0, \fBVertex_d\fP vf)"
.br
.ti -1c
.RI "\fBFieldParams\fP \fBget_local_vsf_param_around_target\fP (Point target_pnt)"
.br
.ti -1c
.RI "void \fBcompute_visibility_field_seq\fP (\fBGridField\fP *global_edf, vector< Point > target_pnts)"
.br
.ti -1c
.RI "void \fBgraph_construct\fP (\fBGridField\fP *global_edf, Point x0)"
.br
.ti -1c
.RI "void \fBcompute_shortest_path\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBchaser::PreplannerParams\fP \fBparams\fP"
.br
.ti -1c
.RI "string \fBworld_frame_id\fP"
.br
.ti -1c
.RI "vector< shared_ptr< \fBGridField\fP > > \fBvsf_field_ptr_seq\fP"
.br
.ti -1c
.RI "\fBGraph\fP \fBdi_graph\fP"
.br
.ti -1c
.RI "\fBDescriptorMap\fP \fBdescriptor_map\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_vsf_vis\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_preplanned_path\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_waypoints\fP"
.br
.ti -1c
.RI "visualization_msgs::Marker \fBmarkers_visibility_field_base\fP"
.br
.ti -1c
.RI "visualization_msgs::MarkerArray \fBmarkers_visibility_field_seq\fP"
.br
.ti -1c
.RI "visualization_msgs::Marker \fBmarker_wpnts\fP"
.br
.ti -1c
.RI "nav_msgs::Path \fBpreplanned_path\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Preplanner::Preplanner ()"

.PP
.nf
3 {};
.fi
.SH "Member Function Documentation"
.PP 
.SS "void Preplanner::compute_shortest_path ()\fC [private]\fP"

.PP
.nf
303                                       {
304 
305     ROS_INFO("shortest path requested\&.");
306     VertexPath solution_seq = dijkstra(descriptor_map["x0"],descriptor_map["xf"]);
307     // if path exist 
308     if(solution_seq\&.size()){
309 
310         solution_seq\&.pop_back();
311 
312         // from graph path to real path 
313         preplanned_path\&.poses\&.clear();
314         // marker update  
315         marker_wpnts\&.points\&.resize(solution_seq\&.size());
316         marker_wpnts\&.colors\&.resize(solution_seq\&.size());  
317 
318 
319         for(auto it = solution_seq\&.begin();it<solution_seq\&.end();it++){
320             geometry_msgs::PoseStamped pose_stamped;
321 
322             pose_stamped\&.pose\&.position = *it;
323             preplanned_path\&.poses\&.push_back(pose_stamped);
324 
325             marker_wpnts\&.colors\&.push_back(marker_wpnts\&.color);
326             marker_wpnts\&.points\&.push_back(*it);
327         }
328     
329     }
330     else
331         ROS_WARN("[Preplanner] The preplanning couldn't be updated\&. (smooth planner may try to make path on old preplan\&.) ");
332     
333     
334 }
.fi
.SS "void Preplanner::compute_visibility_field_seq (\fBGridField\fP * global_edf, vector< Point > target_pnts)\fC [private]\fP"

.PP
.nf
92                                                                                             {
93     vsf_field_ptr_seq\&.resize(target_pnts\&.size());
94     float numeric_threshold = 1e-2;
95     int t = 1;
96     float max_score = -1;  // for visualization 
97     // for each target pnt
98     for (auto it = target_pnts\&.begin();it<target_pnts\&.end();it++,t++){
99         
100         // get local conservative grid map around the current target point
101         int VSF_MODE = 1;
102         vsf_field_ptr_seq[t-1]\&.reset(new GridField(get_local_vsf_param_around_target(*it))); 
103         
104         // field value update with edf grid 
105         for(int ix = 0 ; ix<vsf_field_ptr_seq[t-1]\&.get()->Nx ; ix++)
106             for(int iy = 0 ; iy<vsf_field_ptr_seq[t-1]\&.get()->Ny ; iy++)
107                 for(int iz = 0 ; iz<vsf_field_ptr_seq[t-1]\&.get()->Nz ; iz++){
108                     
109                     // assign visibilty value with minimum clamping to evaluated node 
110                     Point eval_pnt = vsf_field_ptr_seq[t-1]\&.get()->getCellPnt(Vector3i(ix,iy,iz));      
111                     float vs = global_edf->getRayMin(*it,eval_pnt,params\&.vs_min); // visibility score from distance field                    
112                     vsf_field_ptr_seq[t-1]\&.get()->field_vals[ix][iy][iz] = vs;
113 
114                     // let's save the point if certain condition is satified (for graph construction)                
115                     
116                     Vector3i pnt_idx_in_edf = global_edf->getCellIdx(eval_pnt);
117                     float edf_val = global_edf->field_vals[pnt_idx_in_edf(0)][pnt_idx_in_edf(1)][pnt_idx_in_edf(2)];  
118                     Vector3f bearing_vec =(geo2eigen(eval_pnt) - geo2eigen(*it)); 
119                     float relative_dist = bearing_vec\&.norm();                      
120                     float azim = atan2(bearing_vec(2),Vector2f(bearing_vec(0),bearing_vec(1))\&.norm());
121                     
122                     if(edf_val > params\&.r_safe && // safe 
123                         relative_dist > params\&.d_trakcing_min && // tracking spec
124                         relative_dist < params\&.d_trakcing_max && // tracking spec
125                         vs > params\&.vs_min + numeric_threshold  && // non-occlusion
126                         azim < params\&.max_azim)  // tracking spec 
127                         // save
128                         vsf_field_ptr_seq[t-1]\&.get()->saved_points\&.push_back(eval_pnt);
129                     
130                     if (vs >= max_score)
131                         max_score = vs;
132 
133                 }
134         std::cout<<"[Preplanner] nodes at time "<<t<<" are "<<vsf_field_ptr_seq[t-1]\&.get()->saved_points\&.size()<<std::endl;
135     }
136 
137     // save the markers
138 
139     // marker initialization     
140     markers_visibility_field_seq\&.markers\&.clear();    
141 
142     markers_visibility_field_base\&.header\&.stamp = ros::Time::now();
143     markers_visibility_field_base\&.header\&.frame_id = world_frame_id;
144     markers_visibility_field_base\&.points\&.clear();
145     markers_visibility_field_base\&.colors\&.clear();
146     t = 1;
147 
148     for (auto it = target_pnts\&.begin();it<target_pnts\&.end();it++,t++){ // for time
149         int idx = 0;
150         markers_visibility_field_base\&.ns = "time_"+to_string(t);
151 
152         // we draw only saved points from above 
153         for (auto it_node = vsf_field_ptr_seq[t-1]\&.get()->saved_points\&.begin() ; it_node < vsf_field_ptr_seq[t-1]\&.get()->saved_points\&.end() ; it_node++,idx++){
154             Vector3i key = vsf_field_ptr_seq[t-1]\&.get()->getCellIdx(*it_node);
155             float vs = vsf_field_ptr_seq[t-1]\&.get()->field_vals[key(0)][key(1)][key(2)];
156             // std::cout<<vs<<std::endl;
157             // marker update
158             std_msgs::ColorRGBA color;
159             get_color((vs-params\&.vs_min)/(max_score-params\&.vs_min),color\&.r,color\&.g,color\&.b);            
160             color\&.a = 0\&.1;
161 
162             markers_visibility_field_base\&.colors\&.push_back(color);
163             markers_visibility_field_base\&.points\&.push_back(*it_node);
164             idx ++;
165         }
166 
167         markers_visibility_field_seq\&.markers\&.push_back(markers_visibility_field_base);
168         markers_visibility_field_base\&.points\&.clear();
169         markers_visibility_field_base\&.colors\&.clear();
170         
171     }
172 }
.fi
.SS "\fBVertexPath\fP Preplanner::dijkstra (\fBVertex_d\fP v0, \fBVertex_d\fP vf)\fC [private]\fP"

.PP
.nf
247                                                       {
248     
249 
250 
251     // Create things for Dijkstra
252     std::vector<Vertex_d> predecessors(boost::num_vertices(di_graph)); // To store parents
253     std::vector<Weight> distances(boost::num_vertices(di_graph)); // To store distances
254 
255     IndexMap indexMap = boost::get(boost::vertex_index, di_graph);
256     NameMap nameMap = boost::get(boost::vertex_name, di_graph);
257 
258     PredecessorMap predecessorMap(&predecessors[0], indexMap);
259     DistanceMap distanceMap(&distances[0], indexMap);    
260 
261     boost::dijkstra_shortest_paths(di_graph, v0, boost::distance_map(distanceMap)\&.predecessor_map(predecessorMap));
262 
263     typedef std::vector<Graph::edge_descriptor> PathType;
264 
265     PathType path;
266     Vertex_d v = vf; // We want to start at the destination and work our way back to the source
267     for(Vertex_d u = predecessorMap[v]; // Start by setting 'u' to the destintaion node's predecessor
268         u != v; // Keep tracking the path until we get to the source
269         v = u, u = predecessorMap[v]) // Set the current vertex to the current predecessor, and the predecessor to one level up
270     {
271         std::pair<Graph::edge_descriptor, bool> edgePair = boost::edge(u, v, di_graph);
272         Graph::edge_descriptor edge = edgePair\&.first;
273 
274         path\&.push_back( edge );
275     }
276 
277     if (path\&.size())
278     {
279        ROS_INFO("path exist");
280         // Write shortest path
281         float totalDistance = 0;
282 
283         VertexPath vertex_path1;
284         VertexPath vertex_path2;
285         for(PathType::reverse_iterator pathIterator = path\&.rbegin(); pathIterator != path\&.rend(); ++pathIterator)
286         {
287 
288 //            ROS_INFO("path insertion");
289             vertex_path1\&.push_back(nameMap[boost::source(*pathIterator, di_graph)]);
290             vertex_path2\&.push_back(nameMap[boost::target(*pathIterator, di_graph)]);
291         }
292 
293         vertex_path1\&.push_back(vertex_path2\&.back());
294         return vertex_path1;
295     }
296     else{
297         ROS_WARN("[Preplanner] path does not exist\&. returning zero length path\&. ");
298         return VertexPath();
299     }    
300 }
.fi
.SS "\fBFieldParams\fP Preplanner::get_local_vsf_param_around_target (Point target_pnt)\fC [private]\fP"

.PP
.nf
70                                                                          {
71 
72     FieldParams vsf_param;    
73     double lx,ly,lz;
74     // lx = ly = 2*params\&.d_trakcing_max * cos(params\&.max_azim);
75     lx = ly = 4*params\&.d_trakcing_max ;
76     lz = params\&.d_trakcing_max * sin(params\&.max_azim) - params\&.d_trakcing_min * sin(params\&.min_azim) ;
77 
78     vsf_param\&.x0 = target_pnt\&.x - lx/2;
79     vsf_param\&.y0 = target_pnt\&.y - ly/2;
80     vsf_param\&.z0 = target_pnt\&.z;
81     vsf_param\&.lx = lx;
82     vsf_param\&.ly = ly;
83     vsf_param\&.lz = lz;
84     
85     vsf_param\&.resolution = params\&.vsf_resolution;
86     vsf_param\&.ray_stride_res =  params\&.vsf_resolution; // not used for vsf grid 
87 
88     return vsf_param;
89 };
.fi
.SS "nav_msgs::Path Preplanner::get_preplanned_waypoints ()"

.PP
.nf
350 {return preplanned_path;}
.fi
.SS "void Preplanner::graph_construct (\fBGridField\fP * global_edf, Point x0)\fC [private]\fP"

.PP
.nf
175                                                               {
176     
177     // init graph with the initial position of chaser 
178     di_graph = Graph();
179     descriptor_map\&.clear();
180     
181     vector<Node<Point>> prev_layer;
182     Node<Point> initial_node; initial_node\&.value = x0; initial_node\&.name = "x0";
183     prev_layer\&.push_back(initial_node);
184     
185     Vertex_d v0 = boost::add_vertex(x0,di_graph);
186     descriptor_map\&.insert(make_pair(VertexName("x0"),v0));
187  
188     int H = vsf_field_ptr_seq\&.size(); // total prediction horizon 
189     int N_edge = 0; 
190     int N_edge_sub = 0;
191 
192     // in case of t = 0, we don't need (just current step)\&. 
193     for(int t = 1; t<H;t++){
194         N_edge_sub = 0;
195         GridField* cur_vsf_ptr = vsf_field_ptr_seq[t]\&.get();        
196         vector<Node<Point>> cur_layer = cur_vsf_ptr->generate_node(t); // current layer   
197 
198         for (auto it_cur = cur_layer\&.begin() ; it_cur<cur_layer\&.end(); it_cur++){
199             
200             // step1 :  let's register the node(pnt,name) in the current layer into graph 
201             Point cur_pnt = it_cur->value; Vector3f cur_vec = geo2eigen(cur_pnt); 
202             Vertex_d cur_vert = boost::add_vertex(cur_pnt,di_graph);
203             descriptor_map\&.insert(make_pair(it_cur->name,cur_vert));
204             
205             // call the previous layer  
206             GridField* prev_vsf_ptr = vsf_field_ptr_seq[t-1]\&.get();                        
207             
208             // step2 : let's connect with previous layer and add edges 
209             for(auto it_prev = prev_layer\&.begin(); it_prev < prev_layer\&.end();it_prev++){ // prev_layer 
210                 Vertex_d prev_vert = descriptor_map[it_prev->name];
211                 Point prev_pnt = it_prev->value; Vector3f prev_vec = geo2eigen(prev_pnt);
212 
213                 // this condition should be satisfied to be connected 
214                 if(((cur_vec-prev_vec)\&.norm() < params\&.d_connect_max) && (global_edf->getRayMin(cur_pnt,prev_pnt,0) > params\&.r_safe) ){
215                     float weight = (cur_vec-prev_vec)\&.norm() + 
216                             params\&.w_v*1/sqrt(cur_vsf_ptr->getRayMean(cur_pnt,prev_pnt) * prev_vsf_ptr->getRayMean(prev_pnt,cur_pnt)) 
217                             + params\&.w_d*abs((geo2eigen(cur_vsf_ptr->getCentre()) - cur_vec)\&.norm() - params\&.d_trakcing_des);                     
218                     boost::add_edge(prev_vert,cur_vert,weight,di_graph);
219                     if(weight <1e-4)
220                         ROS_WARN("weight is zero");
221                     N_edge ++;
222                     N_edge_sub++;
223                 }
224             }            
225         }
226         prev_layer = cur_layer;
227         cout<<"[Preplanner] connected edge to this layer: "<<N_edge_sub<<std::endl;
228     }
229     
230     cout<<"[Preplanner] total number of edges "<<N_edge<<std::endl;
231 
232 
233     // graph finishing 
234 
235     GridField* prev_vsf_ptr = vsf_field_ptr_seq[H-1]\&.get();
236     Vertex_d vf = boost::add_vertex(Point(),di_graph);
237     descriptor_map\&.insert(make_pair(VertexName("xf"),vf));
238 
239     // step2 : let's connect with previous layer 
240     for(auto it_prev = prev_layer\&.begin(); it_prev < prev_layer\&.end();it_prev++){ // prev_layer 
241         Vertex_d prev_vert = descriptor_map[it_prev->name];
242         // this condition should be satisfied to be connected 
243             boost::add_edge(prev_vert,vf,0,di_graph);
244     }
245 }
.fi
.SS "void Preplanner::init (ros::NodeHandle nh)"

.PP
.nf
5                                      {
6 
7     // preplanner params parsing 
8     nh\&.param("w_v",params\&.w_v,5\&.0);       
9     nh\&.param("w_d",params\&.w_d,1\&.5);            
10     nh\&.param("r_safe",params\&.r_safe,0\&.5);
11     nh\&.param("min_z",params\&.min_z,0\&.4);
12     nh\&.param("vs_min",params\&.vs_min,0\&.3);
13     nh\&.param("vsf_resolution",params\&.vsf_resolution,0\&.7);
14     nh\&.param("d_connect_max",params\&.d_connect_max,2\&.5);
15 
16     nh\&.param("max_tracking_distance",params\&.d_trakcing_max,4\&.0);
17     nh\&.param("min_tracking_distance",params\&.d_trakcing_min,1\&.0);
18     nh\&.param("des_tracking_distance",params\&.d_trakcing_des,2\&.5);
19     nh\&.param("max_azim",params\&.max_azim,(3\&.141592/4));
20     nh\&.param("min_azim",params\&.min_azim,(3\&.141592/7));
21 
22 
23     // world_frame_id 
24     nh\&.param<string>("world_frame_id",world_frame_id,"/world");
25     nh\&.param<string>("world_frame_id",markers_visibility_field_base\&.header\&.frame_id,"/world");
26     nh\&.param<string>("world_frame_id",preplanned_path\&.header\&.frame_id,"/world");
27 
28     // marker initialize 
29     
30     // waypoints 
31     marker_wpnts\&.header\&.frame_id = markers_visibility_field_base\&.header\&.frame_id;
32     marker_wpnts\&.ns = "waypoints";
33     marker_wpnts\&.id = 0;
34     marker_wpnts\&.type = visualization_msgs::Marker::SPHERE_LIST;
35     marker_wpnts\&.color\&.r = 14\&.0/255\&.0;
36     marker_wpnts\&.color\&.g = 50\&.0/255\&.0;
37     marker_wpnts\&.color\&.b = 1\&.0;
38     marker_wpnts\&.color\&.a = 0\&.3;
39     marker_wpnts\&.pose\&.orientation\&.w = 1\&.0;
40     double scale = 0\&.08; 
41     marker_wpnts\&.scale\&.x = scale;
42     marker_wpnts\&.scale\&.y = scale;
43     marker_wpnts\&.scale\&.z = scale;    
44 
45     // vsf_grid_seq 
46 
47     // marker base
48     visualization_msgs::Marker marker;
49     marker\&.header\&.frame_id = markers_visibility_field_base\&.header\&.frame_id;;
50     marker\&.action = visualization_msgs::Marker::ADD;
51     marker\&.type = visualization_msgs::Marker::CUBE_LIST;      
52     marker\&.pose\&.orientation\&.x = 0;
53     marker\&.pose\&.orientation\&.y = 0;
54     marker\&.pose\&.orientation\&.z = 0;
55     marker\&.pose\&.orientation\&.w = 1;                  
56     marker\&.scale\&.x = params\&.vsf_resolution;
57     marker\&.scale\&.y = params\&.vsf_resolution;
58     marker\&.scale\&.z = params\&.vsf_resolution;
59     markers_visibility_field_base = marker; 
60 
61 
62     // ros initialize 
63     pub_vsf_vis = nh\&.advertise<visualization_msgs::MarkerArray>("vsf_grid_seq",1);
64     pub_waypoints = nh\&.advertise<visualization_msgs::Marker>("preplanned_waypoints",1);    
65     pub_preplanned_path = nh\&.advertise<nav_msgs::Path>("preplanned_path",1);
66 
67 
68 };
.fi
.SS "void Preplanner::preplan (\fBGridField\fP * global_edf_ptr, vector< Point > target_pnts, Point chaser_init)"

.PP
.nf
337                                                                                          {
338 
339 
340 
341     // set the height of the moving target 
342     for(auto it = target_pnts\&.begin(); it<target_pnts\&.end(); it++)
343         it->z = params\&.min_z + 1e-3;
344 
345     compute_visibility_field_seq(global_edf,target_pnts);  
346     graph_construct(global_edf,chaser_init);        
347     compute_shortest_path();   
348 }
.fi
.SS "void Preplanner::publish ()"

.PP
.nf
352                         {
353     // vsf seq
354     pub_vsf_vis\&.publish(markers_visibility_field_seq);
355     // waypoints
356     pub_waypoints\&.publish(marker_wpnts);
357     // preplanned path 
358     pub_preplanned_path\&.publish(preplanned_path);
359 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBDescriptorMap\fP Preplanner::descriptor_map\fC [private]\fP"

.SS "\fBGraph\fP Preplanner::di_graph\fC [private]\fP"

.SS "visualization_msgs::Marker Preplanner::marker_wpnts\fC [private]\fP"

.SS "visualization_msgs::Marker Preplanner::markers_visibility_field_base\fC [private]\fP"

.SS "visualization_msgs::MarkerArray Preplanner::markers_visibility_field_seq\fC [private]\fP"

.SS "\fBchaser::PreplannerParams\fP Preplanner::params\fC [private]\fP"

.SS "nav_msgs::Path Preplanner::preplanned_path\fC [private]\fP"

.SS "ros::Publisher Preplanner::pub_preplanned_path\fC [private]\fP"

.SS "ros::Publisher Preplanner::pub_vsf_vis\fC [private]\fP"

.SS "ros::Publisher Preplanner::pub_waypoints\fC [private]\fP"

.SS "vector<shared_ptr<\fBGridField\fP> > Preplanner::vsf_field_ptr_seq\fC [private]\fP"

.SS "string Preplanner::world_frame_id\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
