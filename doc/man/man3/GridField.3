.TH "GridField" 3 "Tue Apr 9 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GridField \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Common\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGridField\fP ()"
.br
.ti -1c
.RI "\fBGridField\fP (\fBFieldParams\fP param)"
.br
.ti -1c
.RI "vector< \fBNode\fP< Point > > \fBgenerate_node\fP (int prefix)"
.br
.ti -1c
.RI "void \fBsetOrigin\fP (Point X0)"
.br
.ti -1c
.RI "Point \fBgetOrigin\fP ()"
.br
.ti -1c
.RI "Point \fBgetCentre\fP ()"
.br
.ti -1c
.RI "Point \fBgetCellPnt\fP (Vector3i idx)"
.br
.ti -1c
.RI "float \fBgetValue\fP (Point pnt)"
.br
.ti -1c
.RI "Vector3i \fBgetCellIdx\fP (Point pnt)"
.br
.ti -1c
.RI "vector< Vector3i > \fBgetRayIdx\fP (Point pnt1, Point pnt2)"
.br
.ti -1c
.RI "float \fBgetRayMin\fP (Point pnt1, Point pnt2, float clamping_val)"
.br
.ti -1c
.RI "float \fBgetRayMean\fP (Point pnt1, Point pnt2)"
.br
.ti -1c
.RI "void \fBupdateCell\fP (Point pnt, float val)"
.br
.ti -1c
.RI "void \fBupdateCell\fP (Vector3i idx, float val)"
.br
.ti -1c
.RI "int \fBgetNumCell\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBFieldParams\fP \fBparams\fP"
.br
.ti -1c
.RI "VectorXf \fBnode_xs\fP"
.br
.ti -1c
.RI "VectorXf \fBnode_ys\fP"
.br
.ti -1c
.RI "VectorXf \fBnode_zs\fP"
.br
.ti -1c
.RI "vector< Point > \fBpnts_list\fP"
.br
.ti -1c
.RI "int \fBNx\fP"
.br
.ti -1c
.RI "int \fBNy\fP"
.br
.ti -1c
.RI "int \fBNz\fP"
.br
.ti -1c
.RI "vector< Point > \fBsaved_points\fP"
.br
.ti -1c
.RI "float *** \fBfield_vals\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "GridField::GridField ()"

.PP
.nf
90 {};
.fi
.SS "GridField::GridField (\fBFieldParams\fP param)"

.PP
.nf
91                                      {
92     // size and grid resoluton does not change 
93 
94     params = param;
95     float lx,ly,lz;
96     lx = params\&.lx;
97     ly = params\&.ly;
98     lz = params\&.lz;
99     float res = params\&.resolution;
100     node_xs = VectorXf((int)floor(lx/res));
101     node_ys = VectorXf((int)floor(ly/res));
102     node_zs = VectorXf((int)floor(lz/res));
103     
104     Nx = node_xs\&.size();
105     Ny = node_ys\&.size();
106     Nz = node_zs\&.size();
107     
108     // node generate
109     for (int i = 0;i<Nx;i++)
110         node_xs(i) = params\&.x0 + params\&.resolution/2 + params\&.resolution*i;
111     for (int i = 0;i<Ny;i++)
112         node_ys(i) = params\&.y0 + params\&.resolution/2 + params\&.resolution*i;
113     for (int i = 0;i<Nz;i++)
114         node_zs(i) = params\&.z0 + params\&.resolution/2 + params\&.resolution*i;            
115 
116     // mesh 
117     for (int ix = 0 ; ix<Nx;ix++)
118         for (int iy = 0 ; iy<Ny;iy++)
119             for (int iz = 0 ; iz<Nz;iz++){
120                 Point pnt;
121                 pnt\&.x = node_xs(ix); pnt\&.y = node_ys(iy); pnt\&.z = node_zs(iz);
122                 pnts_list\&.push_back(pnt);
123             }
124 
125 
126     // field array generate
127     field_vals = new float**[Nx];
128     for (int x=0;x<Nx;x++){
129         field_vals[x] = new float*[Ny];
130         for (int y=0;y<Ny;y++)
131             field_vals[x][y] = new float[Nz];     
132 
133     }
134 
135 };
.fi
.SH "Member Function Documentation"
.PP 
.SS "vector< \fBNode\fP< Point > > GridField::generate_node (int prefix)"

.PP
.nf
137                                                       {
138         // the node names are t{prefix}n{local index}
139         vector<Node<Point>> nodes;
140         int local_id;
141         if(saved_points\&.size()){
142             for(auto it = saved_points\&.begin();it<saved_points\&.end();it++,local_id++){
143                 Node<Point> node;
144                 node\&.name = "t"+to_string(prefix) + "n" + to_string(local_id);
145                 node\&.value = *it;
146                 nodes\&.push_back(node);
147             }
148         }else{
149             ROS_WARN("node generation failed\&. no saved points in grid field\&.");
150 
151         }
152         return nodes;
153 }
.fi
.SS "Vector3i GridField::getCellIdx (Point pnt)"

.PP
.nf
205                                        {
206     Vector3i idx;
207 
208     float x0 = node_xs(0)-params\&.resolution/2;
209     float y0 = node_ys(0)-params\&.resolution/2;
210     float z0 = node_zs(0)-params\&.resolution/2;
211     float xf = node_xs(node_xs\&.size()-1)+params\&.resolution/2;
212     float yf = node_ys(node_ys\&.size()-1)+params\&.resolution/2;
213     float zf = node_zs(node_zs\&.size()-1)+params\&.resolution/2;
214     if(!(x0>pnt\&.x || xf<pnt\&.x || y0>pnt\&.y || yf<pnt\&.y || z0>pnt\&.z || zf<pnt\&.z)){
215         idx(0) = (int)(floor((pnt\&.x - x0)/params\&.resolution));
216         idx(1) = (int)(floor((pnt\&.y - y0)/params\&.resolution));
217         idx(2) = (int)(floor((pnt\&.z - z0)/params\&.resolution));
218     }
219     // out of range 
220     else{
221         idx\&.setConstant(-1);
222         // cout<<"[Grid field] Warnning: referencing point is out of bound\&."<<endl;    
223     }        
224     return idx;        
225 } 
.fi
.SS "Point GridField::getCellPnt (Vector3i idx)"

.PP
.nf
184                                        {
185     
186     Point pnt;
187         
188     if(idx(0)<0 or idx(0)>Nx-1 or idx(1)<0 or idx(1)>Ny-1 or idx(2) < 0 or idx(2) > Nz-1)
189     {
190         pnt\&.x = -999;
191         pnt\&.y = -999;
192         pnt\&.z = -999;
193         
194         cout<<"[Grid field] Warnning: referencing index is out of bound\&."<<endl;    
195 
196     }else{
197         pnt\&.x = node_xs(idx(0));
198         pnt\&.y = node_ys(idx(1));
199         pnt\&.z = node_zs(idx(2)); 
200     }
201     return pnt;
202 }
.fi
.SS "Point GridField::getCentre ()"

.PP
.nf
176                           {
177     Point pnt;
178     pnt\&.x = node_xs(0) + params\&.lx/2;
179     pnt\&.y = node_ys(0) + params\&.ly/2;
180     pnt\&.z = node_zs(0) + params\&.lz/2;
181     return pnt;        
182 }
.fi
.SS "int GridField::getNumCell ()\fC [inline]\fP"

.PP
.nf
163 {return Nx*Ny*Nz;}
.fi
.SS "Point GridField::getOrigin ()"

.PP
.nf
167                           {
168 
169     Point pnt;
170     pnt\&.x = node_xs(0);
171     pnt\&.y = node_ys(0);
172     pnt\&.z = node_zs(0);
173     return pnt;        
174 }
.fi
.SS "vector< Vector3i > GridField::getRayIdx (Point pnt1, Point pnt2)"

.PP
.nf
227 {
228     vector<Vector3i> ray_idx;
229     Vector3f pnt1_vec(pnt1\&.x,pnt1\&.y,pnt1\&.z);
230     Vector3f pnt2_vec(pnt2\&.x,pnt2\&.y,pnt2\&.z);
231     // current end of the ray 
232     Vector3f cur_vec = pnt1_vec;
233 
234 
235     float ray_check_res = this->params\&.ray_stride_res;
236     Vector3f stride_vec = (pnt2_vec - pnt1_vec)\&.normalized()*ray_check_res; 
237     float cur_ray_len=0;
238     float tot_length = (pnt2_vec - pnt1_vec)\&.norm();
239     // traverse this ray 
240     while(cur_ray_len <= tot_length){            
241         cur_vec = cur_vec + stride_vec;
242         cur_ray_len = cur_vec\&.norm();
243         Point cur_end_pnt;
244         cur_end_pnt\&.x = cur_vec(0);
245         cur_end_pnt\&.y = cur_vec(1);
246         cur_end_pnt\&.z = cur_vec(2);            
247         ray_idx\&.push_back(Vector3i(getCellIdx(cur_end_pnt)));
248     }
249 
250     return ray_idx;        
251 }
.fi
.SS "float GridField::getRayMean (Point pnt1, Point pnt2)"

.PP
.nf
303                                                 {
304     // vector<Vector3i> ray_idx = getRayIdx(pnt1,pnt2);  // it will take more time 
305     Vector3f pnt1_vec(pnt1\&.x,pnt1\&.y,pnt1\&.z);
306     Vector3f pnt2_vec(pnt2\&.x,pnt2\&.y,pnt2\&.z);
307     // current end of the ray 
308     Vector3f cur_vec = pnt1_vec;
309 
310     float tot_length = (pnt2_vec - pnt1_vec)\&.norm();
311         
312     Vector3f stride_vec;        
313     if(tot_length == 0)
314         stride_vec\&.setZero();
315     else 
316         stride_vec = (pnt2_vec - pnt1_vec)\&.normalized()*params\&.ray_stride_res; 
317 
318 
319     float cur_ray_len=0;
320     // traverse this ray 
321     float accum_sum = 0\&.0f; // let's assume we don't have any minus value
322     int N_count = 0;
323     while(cur_ray_len <= tot_length){            
324         cur_vec = cur_vec + stride_vec;
325         cur_ray_len = (cur_vec-pnt1_vec)\&.norm();
326         Point cur_end_pnt;
327         cur_end_pnt\&.x = cur_vec(0);
328         cur_end_pnt\&.y = cur_vec(1);
329         cur_end_pnt\&.z = cur_vec(2);     
330         Vector3i idx = getCellIdx(cur_end_pnt);    
331         
332         if ( (idx(0)>=Nx || idx(1)>=Ny || idx(2)>=Nz || idx(0) == -1)){
333             if(N_count ==0 ){
334                 ROS_WARN("the ray start point is out of range\&. returning 0\&.");
335                 return 0;
336             }
337             return accum_sum/N_count; // sometimes, the ray may cross out of bound (for most case because z0 >> 0)            
338         }
339         accum_sum += field_vals[idx(0)][idx(1)][idx(2)];
340         N_count ++ ;
341                     
342     }
343     return (accum_sum/N_count);        
344 }
.fi
.SS "float GridField::getRayMin (Point pnt1, Point pnt2, float clamping_val)"

.PP
.nf
260 {       
261         // vector<Vector3i> ray_idx = getRayIdx(pnt1,pnt2);  // it will take more time 
262         Vector3f pnt1_vec(pnt1\&.x,pnt1\&.y,pnt1\&.z);
263         Vector3f pnt2_vec(pnt2\&.x,pnt2\&.y,pnt2\&.z);
264         // current end of the ray 
265         Vector3f cur_vec = pnt1_vec;
266         
267         float tot_length = (pnt2_vec - pnt1_vec)\&.norm();
268         
269         Vector3f stride_vec;        
270         if(tot_length == 0)
271             stride_vec\&.setZero();
272         else 
273             stride_vec = (pnt2_vec - pnt1_vec)\&.normalized()*params\&.ray_stride_res; 
274  
275         float cur_ray_len=0;
276         // traverse this ray 
277         float min_val = getValue(pnt1); // let's assume we don't have any minus value in the field 
278         
279         while(cur_ray_len < tot_length){            
280             cur_vec = cur_vec + stride_vec;
281             cur_ray_len = (cur_vec-pnt1_vec)\&.norm();
282             Point cur_end_pnt;
283             cur_end_pnt\&.x = cur_vec(0);
284             cur_end_pnt\&.y = cur_vec(1);
285             cur_end_pnt\&.z = cur_vec(2);     
286             Vector3i idx = getCellIdx(cur_end_pnt);    
287 
288             // out of bound 
289             if ( (idx(0)>=Nx || idx(1)>=Ny || idx(2)>=Nz || idx(0) == -1))
290                 break; // sometimes, the ray may cross out of bound (for most case because z0 >> 0)            
291             float val =field_vals[idx(0)][idx(1)][idx(2)];
292             
293             if(val<=clamping_val)
294                 return clamping_val;
295 
296             if(val < min_val)
297                 min_val = val;            
298         }
299         return min_val;        
300     }
.fi
.SS "float GridField::getValue (Point pnt)"

.PP
.nf
253                                   {
254     Vector3i idx = getCellIdx(pnt);
255     return field_vals[idx(0)][idx(1)][idx(2)];
256 
257 }
.fi
.SS "void GridField::setOrigin (Point X0)"

.PP
.nf
155                                  {
156 
157     // node reset 
158     for (int i = 0;i<Nx;i++)
159         node_xs(i) = X0\&.x + params\&.resolution/2 + params\&.resolution*i;
160     for (int i = 0;i<Ny;i++)
161         node_ys(i) = X0\&.y + params\&.resolution/2 + params\&.resolution*i;
162     for (int i = 0;i<Nz;i++)
163         node_zs(i) = X0\&.z + params\&.resolution/2 + params\&.resolution*i;   
164 
165 }
.fi
.SS "void GridField::updateCell (Point pnt, float val)"

.PP
.nf
347                                              {
348     Vector3i idx = getCellIdx(pnt);
349     if (idx(0) != -1)
350     field_vals[idx(0)][idx(1)][idx(2)] = val; 
351     else{
352         ROS_WARN("[Gridmap] indexing out of range, no assign done");
353     }
354 }
.fi
.SS "void GridField::updateCell (Vector3i idx, float val)"

.PP
.nf
356                                                 {
357     field_vals[idx(0)][idx(1)][idx(2)] = val; 
358 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "float*** GridField::field_vals"

.SS "VectorXf GridField::node_xs"

.SS "VectorXf GridField::node_ys"

.SS "VectorXf GridField::node_zs"

.SS "int GridField::Nx"

.SS "int GridField::Ny"

.SS "int GridField::Nz"

.SS "\fBFieldParams\fP GridField::params"

.SS "vector<Point> GridField::pnts_list"

.SS "vector<Point> GridField::saved_points"


.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
