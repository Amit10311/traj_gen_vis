.TH "ObjectsHandler" 3 "Tue Apr 9 2019" "Version 1.0.0" "auto_chaser" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ObjectsHandler \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ObjectHandler\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBObjectsHandler\fP ()"
.br
.ti -1c
.RI "void \fBinit\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "void \fBcompute_edf\fP ()"
.br
.ti -1c
.RI "\fBObjectsHandler\fP (ros::NodeHandle nh)"
.br
.ti -1c
.RI "PoseStamped \fBget_target_pose\fP ()"
.br
.ti -1c
.RI "PoseStamped \fBget_chaser_pose\fP ()"
.br
.ti -1c
.RI "Twist \fBget_chaser_velocity\fP ()"
.br
.ti -1c
.RI "Twist \fBget_chaser_acceleration\fP ()"
.br
.ti -1c
.RI "octomap::OcTree * \fBget_octree_obj_ptr\fP ()"
.br
.ti -1c
.RI "\fBGridField\fP * \fBget_edf_grid_ptr\fP ()"
.br
.ti -1c
.RI "void \fBoctomap_callback\fP (const octomap_msgs::Octomap &msg)"
.br
.ti -1c
.RI "void \fBchaser_spawn\fP (PoseStamped spawn_pose)"
.br
.ti -1c
.RI "void \fBcallback_chaser_init_pose\fP (const geometry_msgs::PoseStampedConstPtr &chaser_init_pose)"
.br
.ti -1c
.RI "void \fBtf_update\fP ()"
.br
.ti -1c
.RI "void \fBpublish\fP ()"
.br
.ti -1c
.RI "vector< Point > \fBget_prediction_seq\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "bool \fBis_octomap_full\fP = false"
.br
.ti -1c
.RI "bool \fBis_chaser_recieved\fP = false"
.br
.ti -1c
.RI "bool \fBis_map_recieved\fP = false"
.br
.ti -1c
.RI "bool \fBis_target_recieved\fP = false"
.br
.ti -1c
.RI "bool \fBis_control_received\fP = false"
.br
.ti -1c
.RI "bool \fBis_chaser_spawned\fP = false"
.br
.ti -1c
.RI "bool \fBis_insert_permit\fP = false"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "ros::Subscriber \fBsub_octomap\fP"
.br
.ti -1c
.RI "ros::Subscriber \fBsub_chaser_init_pose\fP"
.br
.ti -1c
.RI "ros::Publisher \fBpub_edf\fP"
.br
.ti -1c
.RI "visualization_msgs::Marker \fBmarkers_edf\fP"
.br
.ti -1c
.RI "tf::TransformListener * \fBtf_listener\fP"
.br
.ti -1c
.RI "tf::TransformBroadcaster * \fBtf_talker\fP"
.br
.ti -1c
.RI "string \fBworld_frame_id\fP"
.br
.ti -1c
.RI "string \fBchaser_frame_id\fP"
.br
.ti -1c
.RI "string \fBtarget_frame_id\fP"
.br
.ti -1c
.RI "string \fBoctomap_topic_name\fP"
.br
.ti -1c
.RI "PoseStamped \fBtarget_pose\fP"
.br
.ti -1c
.RI "PoseStamped \fBchaser_pose\fP"
.br
.ti -1c
.RI "Twist \fBchaser_vel\fP"
.br
.ti -1c
.RI "Twist \fBchaser_acc\fP"
.br
.ti -1c
.RI "shared_ptr< octomap::OcTree > \fBoctree_ptr\fP"
.br
.ti -1c
.RI "DynamicEDTOctomap * \fBedf_ptr\fP"
.br
.ti -1c
.RI "shared_ptr< \fBGridField\fP > \fBedf_grid_ptr\fP"
.br
.ti -1c
.RI "double \fBmin_z\fP"
.br
.ti -1c
.RI "double \fBchaser_init_z\fP"
.br
.ti -1c
.RI "double \fBedf_max_viz_dist\fP"
.br
.ti -1c
.RI "double \fBedf_max_dist\fP"
.br
.ti -1c
.RI "\fBFieldParams\fP \fBedf_grid_params\fP"
.br
.ti -1c
.RI "int \fBrun_mode\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "ObjectsHandler::ObjectsHandler ()\fC [inline]\fP"

.PP
.nf
51 {};
.fi
.SS "ObjectsHandler::ObjectsHandler (ros::NodeHandle nh)"

.PP
.nf
3 {};
.fi
.SH "Member Function Documentation"
.PP 
.SS "void ObjectsHandler::callback_chaser_init_pose (const geometry_msgs::PoseStampedConstPtr & chaser_init_pose)"

.PP
.nf
266                                                                                                       {
267 
268     chaser_spawn(*chaser_init_pose);    
269 }
.fi
.SS "void ObjectsHandler::chaser_spawn (PoseStamped spawn_pose)"

.PP
.nf
249                                                        {
250     ROS_INFO_ONCE("[Objects handler] spawning chaser\&."); 
251     
252     is_chaser_recieved = true;
253     is_chaser_spawned = true;    
254     
255     if(run_mode == 0){
256         chaser_pose = spawn_pose;
257         chaser_pose\&.pose\&.position\&.z = chaser_init_z;
258 
259     }else{
260         // hover command 
261         
262     }
263 
264 }
.fi
.SS "void ObjectsHandler::compute_edf ()"

.PP
.nf
218                                 {
219 
220     for(int ix = 0 ; ix<edf_grid_ptr\&.get()->Nx ; ix++)
221         for(int iy = 0 ; iy<edf_grid_ptr\&.get()->Ny ; iy++)
222             for(int iz = 0 ; iz<edf_grid_ptr\&.get()->Nz ; iz++){
223                 Point eval_pnt = edf_grid_ptr\&.get()->getCellPnt(Vector3i(ix,iy,iz));  
224                 // query edf value from edf mapper                       
225                 float dist_val = edf_ptr->getDistance(octomap::point3d(eval_pnt\&.x,eval_pnt\&.y,eval_pnt\&.z));
226 
227                 // edf value assign to homogenous grid  
228                 edf_grid_ptr\&.get()->field_vals[ix][iy][iz] = dist_val;
229 
230                 // marker generation
231                 if(dist_val<edf_max_viz_dist){                
232                     // color 
233                     std_msgs::ColorRGBA color;                    
234                     get_color_dist(dist_val,color,edf_max_viz_dist);
235 
236                     // marker 
237                     markers_edf\&.points\&.push_back(eval_pnt);
238                     markers_edf\&.colors\&.push_back(color);                    
239                 }
240             }    
241 
242 }
.fi
.SS "Twist ObjectsHandler::get_chaser_acceleration ()"

.PP
.nf
117 {return chaser_acc;};
.fi
.SS "PoseStamped ObjectsHandler::get_chaser_pose ()"

.PP
.nf
114 {return chaser_pose;};
.fi
.SS "Twist ObjectsHandler::get_chaser_velocity ()"

.PP
.nf
116 {return chaser_vel;};
.fi
.SS "\fBGridField\fP * ObjectsHandler::get_edf_grid_ptr ()"

.PP
.nf
120 {return edf_grid_ptr\&.get();};
.fi
.SS "octomap::OcTree * ObjectsHandler::get_octree_obj_ptr ()"

.PP
.nf
119 {return octree_ptr\&.get();};
.fi
.SS "vector< Point > ObjectsHandler::get_prediction_seq ()"

.PP
.nf
272                                                 {
273     
274     
275 }
.fi
.SS "PoseStamped ObjectsHandler::get_target_pose ()"

.PP
.nf
108                                             {
109     PoseStamped pose(target_pose); 
110     pose\&.pose\&.position\&.z = min_z; 
111     return pose;
112 };
.fi
.SS "void ObjectsHandler::init (ros::NodeHandle nh)"

.PP
.nf
5                                          {
6 
7     // parameters
8     nh\&.param<string>("world_frame_id",this->world_frame_id,"/world");
9     nh\&.param<string>("target_frame_id",this->target_frame_id,"/target__base_footprint");
10     nh\&.param<string>("chaser_frame_id",this->chaser_frame_id,"/firefly/base_link"); 
11 
12     // edf grid param
13     nh\&.param("min_z",min_z,0\&.4);   
14     nh\&.param("chaser_init_z",chaser_init_z,1\&.0);             
15     nh\&.param("edf_max_dist",edf_max_dist,2\&.0);  
16     nh\&.param("edf_max_plot_dist",edf_max_viz_dist,0\&.5);  
17     nh\&.param("edf_resolution",edf_grid_params\&.resolution,0\&.5);  
18     nh\&.param("edf_stride_resolution",edf_grid_params\&.ray_stride_res,0\&.3);  
19     nh\&.param("run_mode",run_mode,0);  
20 
21 
22     target_pose\&.header\&.frame_id = world_frame_id;
23     chaser_pose\&.header\&.frame_id = world_frame_id;
24     markers_edf\&.header\&.frame_id = world_frame_id;
25 
26     markers_edf\&.action = visualization_msgs::Marker::ADD;
27     markers_edf\&.type = visualization_msgs::Marker::CUBE_LIST;      
28     markers_edf\&.pose\&.orientation\&.x = 0;
29     markers_edf\&.pose\&.orientation\&.y = 0;
30     markers_edf\&.pose\&.orientation\&.z = 0;
31     markers_edf\&.pose\&.orientation\&.w = 1;                  
32     markers_edf\&.scale\&.x = edf_grid_params\&.resolution;
33     markers_edf\&.scale\&.y = edf_grid_params\&.resolution;
34     markers_edf\&.scale\&.z = edf_grid_params\&.resolution;
35     
36     
37     // topics 
38     tf_listener = new (tf::TransformListener);
39     tf_talker = new (tf::TransformBroadcaster);
40 
41     pub_edf = nh\&.advertise<visualization_msgs::Marker>("edf_grid",1);
42 
43     // octomap            
44     nh\&.param("is_octomap_full",this->is_octomap_full,true);
45     octree_ptr\&.reset(new octomap::OcTree(0\&.1)); // arbitrary init
46     if (is_octomap_full)
47         sub_octomap = nh\&.subscribe("/octomap_full",1,&ObjectsHandler::octomap_callback,this);   
48     else
49         sub_octomap = nh\&.subscribe("/octomap_binary",1,&ObjectsHandler::octomap_callback,this);   
50 
51     sub_chaser_init_pose = nh\&.subscribe("/chaser_init_pose",1,&ObjectsHandler::callback_chaser_init_pose,this);
52     
53     ROS_INFO("Object handler initialized\&."); 
54 }
.fi
.SS "void ObjectsHandler::octomap_callback (const octomap_msgs::Octomap & msg)"

.PP
.nf
56                                                                    {
57     // we receive only once from octoamp server
58     if (not is_map_recieved){
59 
60         // octomap subscribing 
61         octomap::AbstractOcTree* octree;
62 
63         if(is_octomap_full)
64             octree=octomap_msgs::fullMsgToMap(msg);
65         else
66             octree=octomap_msgs::binaryMsgToMap(msg);
67 
68         this->octree_ptr\&.reset((dynamic_cast<octomap::OcTree*>(octree)));
69 
70         ROS_INFO_ONCE("[Objects handler] octomap received\&.");
71         double x,y,z;
72         octree_ptr\&.get()->getMetricMin(x,y,z);
73         octomap::point3d boundary_min(x,y,z); 
74         boundary_min\&.z() = min_z;
75         octree_ptr\&.get()->getMetricMax(x,y,z);
76         octomap::point3d boundary_max(x,y,z); 
77 
78         bool unknownAsOccupied = false;
79 
80 
81         std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
82 
83         // Euclidean distance transform  
84         edf_ptr = new DynamicEDTOctomap(edf_max_dist,octree_ptr\&.get(),
85         boundary_min,
86         boundary_max,unknownAsOccupied);
87         edf_ptr->update();    
88 
89         std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
90         double diff = std::chrono::duration_cast<chrono::nanoseconds>( end - begin )\&.count()*1e-9;
91         ROS_INFO("[Objects handler] dynamic EDT computed in %f [sec]",diff);
92 
93         // generate homogenous grid 
94         edf_grid_params\&.x0 = boundary_min\&.x();
95         edf_grid_params\&.y0 = boundary_min\&.y();
96         edf_grid_params\&.z0 = min_z;
97         edf_grid_params\&.lx = boundary_max\&.x() - boundary_min\&.x();
98         edf_grid_params\&.ly = boundary_max\&.y() - boundary_min\&.y();
99         edf_grid_params\&.lz = (boundary_max\&.z() - min_z);
100         edf_grid_ptr\&.reset(new GridField(edf_grid_params));
101         compute_edf();
102 
103         is_map_recieved = true;
104     }
105 };
.fi
.SS "void ObjectsHandler::publish ()"

.PP
.nf
244                             {
245 
246     pub_edf\&.publish(markers_edf);
247 }
.fi
.SS "void ObjectsHandler::tf_update ()"

.PP
.nf
123                               {
124     
125     
126     if(run_mode == 1){
127         // mode 1 : gazebo simulation mode 
128         // chaser and target to be listened 
129         string objects_frame_id[2];
130         objects_frame_id[0] = target_frame_id;
131         objects_frame_id[1] = chaser_frame_id;
132         
133         for (int i=0;i<2;i++){            
134             tf::StampedTransform transform;    
135             // 
136             try{
137                 tf_listener->lookupTransform(world_frame_id,objects_frame_id[i],ros::Time(0), transform);
138                 PoseStamped pose_stamped;
139                 pose_stamped\&.header\&.stamp = ros::Time::now();
140                 pose_stamped\&.header\&.frame_id = world_frame_id;
141 
142                 pose_stamped\&.pose\&.position\&.x = transform\&.getOrigin()\&.getX();
143                 pose_stamped\&.pose\&.position\&.y = transform\&.getOrigin()\&.getY();
144                 pose_stamped\&.pose\&.position\&.z = transform\&.getOrigin()\&.getZ();
145 
146                 pose_stamped\&.pose\&.orientation\&.x = transform\&.getRotation()\&.getX();
147                 pose_stamped\&.pose\&.orientation\&.y = transform\&.getRotation()\&.getY();
148                 pose_stamped\&.pose\&.orientation\&.z = transform\&.getRotation()\&.getZ();
149                 pose_stamped\&.pose\&.orientation\&.w = transform\&.getRotation()\&.getW();
150 
151 
152 
153                 if (i==0)
154                     {ROS_INFO_ONCE("[Objects handler] tf of target received\&. "); is_target_recieved = true; target_pose = pose_stamped;} 
155                 else
156                     {ROS_INFO_ONCE("[Objects handler] tf of chaser received\&. "); is_chaser_recieved = true; chaser_pose = pose_stamped;}  
157 
158             }
159             catch (tf::TransformException ex){
160                 if (i==0)
161                     ROS_ERROR_ONCE("[Objects handler] tf of target does not exist\&. ",ex\&.what());  
162                 else
163                     ROS_ERROR_ONCE("[Objects handler] tf of chaser does not exist\&. ",ex\&.what());  
164             
165             }
166         }
167 
168     }
169     else{
170         // mode 0 : no gazebo mode  
171         // target to be listened and chaser to be broadcast  
172 
173         // 1) target tf listen from target manager  
174         tf::StampedTransform transform;    
175         try{
176             tf_listener->lookupTransform(world_frame_id,target_frame_id,ros::Time(0), transform);
177             PoseStamped pose_stamped;
178             pose_stamped\&.header\&.stamp = ros::Time::now();
179             pose_stamped\&.header\&.frame_id = world_frame_id;
180 
181             pose_stamped\&.pose\&.position\&.x = transform\&.getOrigin()\&.getX();
182             pose_stamped\&.pose\&.position\&.y = transform\&.getOrigin()\&.getY();
183             pose_stamped\&.pose\&.position\&.z = transform\&.getOrigin()\&.getZ();
184 
185             pose_stamped\&.pose\&.orientation\&.x = transform\&.getRotation()\&.getX();
186             pose_stamped\&.pose\&.orientation\&.y = transform\&.getRotation()\&.getY();
187             pose_stamped\&.pose\&.orientation\&.z = transform\&.getRotation()\&.getZ();
188             pose_stamped\&.pose\&.orientation\&.w = transform\&.getRotation()\&.getW();        
189 
190             ROS_INFO_ONCE("[Objects handler] tf of target received\&. "); is_target_recieved = true; target_pose = pose_stamped;
191         }
192         catch (tf::TransformException ex){
193             ROS_ERROR_ONCE("[Objects handler] tf of target does not exist\&. ",ex\&.what());  
194         }    
195             
196         if(is_chaser_spawned){
197 
198             // 2) chaser tf broadcasting
199             tf::Quaternion q;
200             q\&.setX(chaser_pose\&.pose\&.orientation\&.x);
201             q\&.setY(chaser_pose\&.pose\&.orientation\&.y);
202             q\&.setZ(chaser_pose\&.pose\&.orientation\&.z);
203             q\&.setW(chaser_pose\&.pose\&.orientation\&.w);
204             
205             transform\&.setOrigin(tf::Vector3(chaser_pose\&.pose\&.position\&.x,chaser_pose\&.pose\&.position\&.y,chaser_pose\&.pose\&.position\&.z));
206             transform\&.setRotation(q);
207             tf_talker->sendTransform(tf::StampedTransform(transform,ros::Time::now(),world_frame_id,chaser_frame_id));        
208         }
209         else{
210             ROS_INFO_ONCE("[Objects handler] please spawn target\&. ");  
211         }
212      
213     }   
214 
215 
216 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "Twist ObjectsHandler::chaser_acc\fC [private]\fP"

.SS "string ObjectsHandler::chaser_frame_id\fC [private]\fP"

.SS "double ObjectsHandler::chaser_init_z\fC [private]\fP"

.SS "PoseStamped ObjectsHandler::chaser_pose\fC [private]\fP"

.SS "Twist ObjectsHandler::chaser_vel\fC [private]\fP"

.SS "\fBFieldParams\fP ObjectsHandler::edf_grid_params\fC [private]\fP"

.SS "shared_ptr<\fBGridField\fP> ObjectsHandler::edf_grid_ptr\fC [private]\fP"

.SS "double ObjectsHandler::edf_max_dist\fC [private]\fP"

.SS "double ObjectsHandler::edf_max_viz_dist\fC [private]\fP"

.SS "DynamicEDTOctomap* ObjectsHandler::edf_ptr\fC [private]\fP"

.SS "bool ObjectsHandler::is_chaser_recieved = false"

.SS "bool ObjectsHandler::is_chaser_spawned = false"

.SS "bool ObjectsHandler::is_control_received = false"

.SS "bool ObjectsHandler::is_insert_permit = false"

.SS "bool ObjectsHandler::is_map_recieved = false"

.SS "bool ObjectsHandler::is_octomap_full = false"

.SS "bool ObjectsHandler::is_target_recieved = false"

.SS "visualization_msgs::Marker ObjectsHandler::markers_edf\fC [private]\fP"

.SS "double ObjectsHandler::min_z\fC [private]\fP"

.SS "string ObjectsHandler::octomap_topic_name\fC [private]\fP"

.SS "shared_ptr<octomap::OcTree> ObjectsHandler::octree_ptr\fC [private]\fP"

.SS "ros::Publisher ObjectsHandler::pub_edf\fC [private]\fP"

.SS "int ObjectsHandler::run_mode\fC [private]\fP"

.SS "ros::Subscriber ObjectsHandler::sub_chaser_init_pose\fC [private]\fP"

.SS "ros::Subscriber ObjectsHandler::sub_octomap\fC [private]\fP"

.SS "string ObjectsHandler::target_frame_id\fC [private]\fP"

.SS "PoseStamped ObjectsHandler::target_pose\fC [private]\fP"

.SS "tf::TransformListener* ObjectsHandler::tf_listener\fC [private]\fP"

.SS "tf::TransformBroadcaster* ObjectsHandler::tf_talker\fC [private]\fP"

.SS "string ObjectsHandler::world_frame_id\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for auto_chaser from the source code\&.
